//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Health.Direct.DnsResponder.DomainManagerService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Address", Namespace="urn:directproject:config/store/082010")]
    [System.SerializableAttribute()]
    public partial class Address : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.DateTime CreateDateField;
        
        private string DisplayNameField;
        
        private long DomainIDField;
        
        private string EmailAddressField;
        
        private long IDField;
        
        private Health.Direct.DnsResponder.DomainManagerService.EntityStatus StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        private System.DateTime UpdateDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime CreateDate {
            get {
                return this.CreateDateField;
            }
            set {
                if ((this.CreateDateField.Equals(value) != true)) {
                    this.CreateDateField = value;
                    this.RaisePropertyChanged("CreateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long DomainID {
            get {
                return this.DomainIDField;
            }
            set {
                if ((this.DomainIDField.Equals(value) != true)) {
                    this.DomainIDField = value;
                    this.RaisePropertyChanged("DomainID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string EmailAddress {
            get {
                return this.EmailAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailAddressField, value) != true)) {
                    this.EmailAddressField = value;
                    this.RaisePropertyChanged("EmailAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Health.Direct.DnsResponder.DomainManagerService.EntityStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime UpdateDate {
            get {
                return this.UpdateDateField;
            }
            set {
                if ((this.UpdateDateField.Equals(value) != true)) {
                    this.UpdateDateField = value;
                    this.RaisePropertyChanged("UpdateDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntityStatus", Namespace="http://schemas.datacontract.org/2004/07/Health.Direct.Config.Store")]
    public enum EntityStatus : byte {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        New = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Enabled = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Disabled = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConfigStoreFault", Namespace="urn:directproject:config/store/082010")]
    [System.SerializableAttribute()]
    public partial class ConfigStoreFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Health.Direct.DnsResponder.DomainManagerService.ConfigStoreError ErrorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Health.Direct.DnsResponder.DomainManagerService.ConfigStoreError Error {
            get {
                return this.ErrorField;
            }
            set {
                if ((this.ErrorField.Equals(value) != true)) {
                    this.ErrorField = value;
                    this.RaisePropertyChanged("Error");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConfigStoreError", Namespace="http://schemas.datacontract.org/2004/07/Health.Direct.Config.Store")]
    public enum ConfigStoreError : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unexpected = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Conflict = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DatabaseError = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UniqueConstraint = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ForeignKeyConstraint = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidIDs = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidDomain = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidDomainName = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DomainNameLength = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidDomainID = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidAddress = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AddressLength = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DisplayNameLength = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidEmailAddress = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidCertificate = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidX509Certificate = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MissingCertificateData = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidOwnerName = 19,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OwnerLength = 20,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidThumbprint = 21,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidAnchor = 22,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AccountNameLength = 23,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidMXSMTPName = 24,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MXSMTPNameLength = 25,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidMX = 26,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvaildDnsRecord = 27,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotesLength = 28,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Domain", Namespace="urn:directproject:config/store/082010")]
    [System.SerializableAttribute()]
    public partial class Domain : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.DateTime CreateDateField;
        
        private long IDField;
        
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<long> PostmasterIDField;
        
        private Health.Direct.DnsResponder.DomainManagerService.EntityStatus StatusField;
        
        private System.DateTime UpdateDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime CreateDate {
            get {
                return this.CreateDateField;
            }
            set {
                if ((this.CreateDateField.Equals(value) != true)) {
                    this.CreateDateField = value;
                    this.RaisePropertyChanged("CreateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> PostmasterID {
            get {
                return this.PostmasterIDField;
            }
            set {
                if ((this.PostmasterIDField.Equals(value) != true)) {
                    this.PostmasterIDField = value;
                    this.RaisePropertyChanged("PostmasterID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Health.Direct.DnsResponder.DomainManagerService.EntityStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime UpdateDate {
            get {
                return this.UpdateDateField;
            }
            set {
                if ((this.UpdateDateField.Equals(value) != true)) {
                    this.UpdateDateField = value;
                    this.RaisePropertyChanged("UpdateDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DnsRecord", Namespace="urn:directproject:config/store/082010")]
    [System.SerializableAttribute()]
    public partial class DnsRecord : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.DateTime CreateDateField;
        
        private string DomainNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NotesField;
        
        private byte[] RecordDataField;
        
        private long RecordIDField;
        
        private int TypeIDField;
        
        private System.DateTime UpdateDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime CreateDate {
            get {
                return this.CreateDateField;
            }
            set {
                if ((this.CreateDateField.Equals(value) != true)) {
                    this.CreateDateField = value;
                    this.RaisePropertyChanged("CreateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string DomainName {
            get {
                return this.DomainNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DomainNameField, value) != true)) {
                    this.DomainNameField = value;
                    this.RaisePropertyChanged("DomainName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Notes {
            get {
                return this.NotesField;
            }
            set {
                if ((object.ReferenceEquals(this.NotesField, value) != true)) {
                    this.NotesField = value;
                    this.RaisePropertyChanged("Notes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public byte[] RecordData {
            get {
                return this.RecordDataField;
            }
            set {
                if ((object.ReferenceEquals(this.RecordDataField, value) != true)) {
                    this.RecordDataField = value;
                    this.RaisePropertyChanged("RecordData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long RecordID {
            get {
                return this.RecordIDField;
            }
            set {
                if ((this.RecordIDField.Equals(value) != true)) {
                    this.RecordIDField = value;
                    this.RaisePropertyChanged("RecordID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int TypeID {
            get {
                return this.TypeIDField;
            }
            set {
                if ((this.TypeIDField.Equals(value) != true)) {
                    this.TypeIDField = value;
                    this.RaisePropertyChanged("TypeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime UpdateDate {
            get {
                return this.UpdateDateField;
            }
            set {
                if ((this.UpdateDateField.Equals(value) != true)) {
                    this.UpdateDateField = value;
                    this.RaisePropertyChanged("UpdateDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="urn:directproject:config/store/082010", ConfigurationName="DomainManagerService.IAddressManager")]
    public interface IAddressManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAddressManager/AddAddress", ReplyAction="urn:directproject:config/store/082010/IAddressManager/AddAddressResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.DnsResponder.DomainManagerService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IAddressManager/AddAddressConfigStoreFaultF" +
            "ault", Name="ConfigStoreFault")]
        Health.Direct.DnsResponder.DomainManagerService.Address AddAddress(Health.Direct.DnsResponder.DomainManagerService.Address address);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAddressManager/AddAddresses", ReplyAction="urn:directproject:config/store/082010/IAddressManager/AddAddressesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.DnsResponder.DomainManagerService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IAddressManager/AddAddressesConfigStoreFaul" +
            "tFault", Name="ConfigStoreFault")]
        void AddAddresses(Health.Direct.DnsResponder.DomainManagerService.Address[] addresses);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAddressManager/UpdateAddresses", ReplyAction="urn:directproject:config/store/082010/IAddressManager/UpdateAddressesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.DnsResponder.DomainManagerService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IAddressManager/UpdateAddressesConfigStoreF" +
            "aultFault", Name="ConfigStoreFault")]
        void UpdateAddresses(Health.Direct.DnsResponder.DomainManagerService.Address[] address);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAddressManager/GetAddresses", ReplyAction="urn:directproject:config/store/082010/IAddressManager/GetAddressesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.DnsResponder.DomainManagerService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IAddressManager/GetAddressesConfigStoreFaul" +
            "tFault", Name="ConfigStoreFault")]
        Health.Direct.DnsResponder.DomainManagerService.Address[] GetAddresses(string[] emailAddresses, System.Nullable<Health.Direct.DnsResponder.DomainManagerService.EntityStatus> status);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAddressManager/GetAddressesByID", ReplyAction="urn:directproject:config/store/082010/IAddressManager/GetAddressesByIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.DnsResponder.DomainManagerService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IAddressManager/GetAddressesByIDConfigStore" +
            "FaultFault", Name="ConfigStoreFault")]
        Health.Direct.DnsResponder.DomainManagerService.Address[] GetAddressesByID(long[] addressIDs, System.Nullable<Health.Direct.DnsResponder.DomainManagerService.EntityStatus> status);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAddressManager/RemoveAddresses", ReplyAction="urn:directproject:config/store/082010/IAddressManager/RemoveAddressesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.DnsResponder.DomainManagerService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IAddressManager/RemoveAddressesConfigStoreF" +
            "aultFault", Name="ConfigStoreFault")]
        void RemoveAddresses(string[] emailAddresses);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAddressManager/RemoveDomainAddresses", ReplyAction="urn:directproject:config/store/082010/IAddressManager/RemoveDomainAddressesRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.DnsResponder.DomainManagerService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IAddressManager/RemoveDomainAddressesConfig" +
            "StoreFaultFault", Name="ConfigStoreFault")]
        void RemoveDomainAddresses(long domainID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAddressManager/SetDomainAddressesStatus", ReplyAction="urn:directproject:config/store/082010/IAddressManager/SetDomainAddressesStatusRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.DnsResponder.DomainManagerService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IAddressManager/SetDomainAddressesStatusCon" +
            "figStoreFaultFault", Name="ConfigStoreFault")]
        void SetDomainAddressesStatus(long domainID, Health.Direct.DnsResponder.DomainManagerService.EntityStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAddressManager/GetAddressCount", ReplyAction="urn:directproject:config/store/082010/IAddressManager/GetAddressCountResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.DnsResponder.DomainManagerService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IAddressManager/GetAddressCountConfigStoreF" +
            "aultFault", Name="ConfigStoreFault")]
        int GetAddressCount(string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAddressManager/EnumerateDomainAddresses", ReplyAction="urn:directproject:config/store/082010/IAddressManager/EnumerateDomainAddressesRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.DnsResponder.DomainManagerService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IAddressManager/EnumerateDomainAddressesCon" +
            "figStoreFaultFault", Name="ConfigStoreFault")]
        Health.Direct.DnsResponder.DomainManagerService.Address[] EnumerateDomainAddresses(string domainName, string lastAddress, int maxResults);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAddressManager/EnumerateAddresses", ReplyAction="urn:directproject:config/store/082010/IAddressManager/EnumerateAddressesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.DnsResponder.DomainManagerService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IAddressManager/EnumerateAddressesConfigSto" +
            "reFaultFault", Name="ConfigStoreFault")]
        Health.Direct.DnsResponder.DomainManagerService.Address[] EnumerateAddresses(string lastAddress, int maxResults);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface IAddressManagerChannel : Health.Direct.DnsResponder.DomainManagerService.IAddressManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class AddressManagerClient : System.ServiceModel.ClientBase<Health.Direct.DnsResponder.DomainManagerService.IAddressManager>, Health.Direct.DnsResponder.DomainManagerService.IAddressManager {
        
        public AddressManagerClient() {
        }
        
        public AddressManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AddressManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AddressManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AddressManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Health.Direct.DnsResponder.DomainManagerService.Address AddAddress(Health.Direct.DnsResponder.DomainManagerService.Address address) {
            return base.Channel.AddAddress(address);
        }
        
        public void AddAddresses(Health.Direct.DnsResponder.DomainManagerService.Address[] addresses) {
            base.Channel.AddAddresses(addresses);
        }
        
        public void UpdateAddresses(Health.Direct.DnsResponder.DomainManagerService.Address[] address) {
            base.Channel.UpdateAddresses(address);
        }
        
        public Health.Direct.DnsResponder.DomainManagerService.Address[] GetAddresses(string[] emailAddresses, System.Nullable<Health.Direct.DnsResponder.DomainManagerService.EntityStatus> status) {
            return base.Channel.GetAddresses(emailAddresses, status);
        }
        
        public Health.Direct.DnsResponder.DomainManagerService.Address[] GetAddressesByID(long[] addressIDs, System.Nullable<Health.Direct.DnsResponder.DomainManagerService.EntityStatus> status) {
            return base.Channel.GetAddressesByID(addressIDs, status);
        }
        
        public void RemoveAddresses(string[] emailAddresses) {
            base.Channel.RemoveAddresses(emailAddresses);
        }
        
        public void RemoveDomainAddresses(long domainID) {
            base.Channel.RemoveDomainAddresses(domainID);
        }
        
        public void SetDomainAddressesStatus(long domainID, Health.Direct.DnsResponder.DomainManagerService.EntityStatus status) {
            base.Channel.SetDomainAddressesStatus(domainID, status);
        }
        
        public int GetAddressCount(string domainName) {
            return base.Channel.GetAddressCount(domainName);
        }
        
        public Health.Direct.DnsResponder.DomainManagerService.Address[] EnumerateDomainAddresses(string domainName, string lastAddress, int maxResults) {
            return base.Channel.EnumerateDomainAddresses(domainName, lastAddress, maxResults);
        }
        
        public Health.Direct.DnsResponder.DomainManagerService.Address[] EnumerateAddresses(string lastAddress, int maxResults) {
            return base.Channel.EnumerateAddresses(lastAddress, maxResults);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="urn:directproject:config/store/082010", ConfigurationName="DomainManagerService.IDomainManager")]
    public interface IDomainManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDomainManager/AddDomain", ReplyAction="urn:directproject:config/store/082010/IDomainManager/AddDomainResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.DnsResponder.DomainManagerService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IDomainManager/AddDomainConfigStoreFaultFau" +
            "lt", Name="ConfigStoreFault")]
        Health.Direct.DnsResponder.DomainManagerService.Domain AddDomain(Health.Direct.DnsResponder.DomainManagerService.Domain domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDomainManager/UpdateDomain", ReplyAction="urn:directproject:config/store/082010/IDomainManager/UpdateDomainResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.DnsResponder.DomainManagerService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IDomainManager/UpdateDomainConfigStoreFault" +
            "Fault", Name="ConfigStoreFault")]
        void UpdateDomain(Health.Direct.DnsResponder.DomainManagerService.Domain domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDomainManager/GetDomain", ReplyAction="urn:directproject:config/store/082010/IDomainManager/GetDomainResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.DnsResponder.DomainManagerService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IDomainManager/GetDomainConfigStoreFaultFau" +
            "lt", Name="ConfigStoreFault")]
        Health.Direct.DnsResponder.DomainManagerService.Domain GetDomain(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDomainManager/GetDomainCount", ReplyAction="urn:directproject:config/store/082010/IDomainManager/GetDomainCountResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.DnsResponder.DomainManagerService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IDomainManager/GetDomainCountConfigStoreFau" +
            "ltFault", Name="ConfigStoreFault")]
        int GetDomainCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDomainManager/GetDomains", ReplyAction="urn:directproject:config/store/082010/IDomainManager/GetDomainsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.DnsResponder.DomainManagerService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IDomainManager/GetDomainsConfigStoreFaultFa" +
            "ult", Name="ConfigStoreFault")]
        Health.Direct.DnsResponder.DomainManagerService.Domain[] GetDomains(string[] domainNames, System.Nullable<Health.Direct.DnsResponder.DomainManagerService.EntityStatus> status);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDomainManager/RemoveDomain", ReplyAction="urn:directproject:config/store/082010/IDomainManager/RemoveDomainResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.DnsResponder.DomainManagerService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IDomainManager/RemoveDomainConfigStoreFault" +
            "Fault", Name="ConfigStoreFault")]
        void RemoveDomain(string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDomainManager/EnumerateDomains", ReplyAction="urn:directproject:config/store/082010/IDomainManager/EnumerateDomainsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.DnsResponder.DomainManagerService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IDomainManager/EnumerateDomainsConfigStoreF" +
            "aultFault", Name="ConfigStoreFault")]
        Health.Direct.DnsResponder.DomainManagerService.Domain[] EnumerateDomains(string lastDomainName, int maxResults);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface IDomainManagerChannel : Health.Direct.DnsResponder.DomainManagerService.IDomainManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class DomainManagerClient : System.ServiceModel.ClientBase<Health.Direct.DnsResponder.DomainManagerService.IDomainManager>, Health.Direct.DnsResponder.DomainManagerService.IDomainManager {
        
        public DomainManagerClient() {
        }
        
        public DomainManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DomainManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DomainManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DomainManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Health.Direct.DnsResponder.DomainManagerService.Domain AddDomain(Health.Direct.DnsResponder.DomainManagerService.Domain domain) {
            return base.Channel.AddDomain(domain);
        }
        
        public void UpdateDomain(Health.Direct.DnsResponder.DomainManagerService.Domain domain) {
            base.Channel.UpdateDomain(domain);
        }
        
        public Health.Direct.DnsResponder.DomainManagerService.Domain GetDomain(long id) {
            return base.Channel.GetDomain(id);
        }
        
        public int GetDomainCount() {
            return base.Channel.GetDomainCount();
        }
        
        public Health.Direct.DnsResponder.DomainManagerService.Domain[] GetDomains(string[] domainNames, System.Nullable<Health.Direct.DnsResponder.DomainManagerService.EntityStatus> status) {
            return base.Channel.GetDomains(domainNames, status);
        }
        
        public void RemoveDomain(string domainName) {
            base.Channel.RemoveDomain(domainName);
        }
        
        public Health.Direct.DnsResponder.DomainManagerService.Domain[] EnumerateDomains(string lastDomainName, int maxResults) {
            return base.Channel.EnumerateDomains(lastDomainName, maxResults);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="urn:directproject:config/store/082010", ConfigurationName="DomainManagerService.IDnsRecordManager")]
    public interface IDnsRecordManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDnsRecordManager/AddDnsRecords", ReplyAction="urn:directproject:config/store/082010/IDnsRecordManager/AddDnsRecordsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.DnsResponder.DomainManagerService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IDnsRecordManager/AddDnsRecordsConfigStoreF" +
            "aultFault", Name="ConfigStoreFault")]
        void AddDnsRecords(Health.Direct.DnsResponder.DomainManagerService.DnsRecord[] dnsRecords);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDnsRecordManager/AddDnsRecord", ReplyAction="urn:directproject:config/store/082010/IDnsRecordManager/AddDnsRecordResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.DnsResponder.DomainManagerService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IDnsRecordManager/AddDnsRecordConfigStoreFa" +
            "ultFault", Name="ConfigStoreFault")]
        void AddDnsRecord(Health.Direct.DnsResponder.DomainManagerService.DnsRecord record);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDnsRecordManager/Count", ReplyAction="urn:directproject:config/store/082010/IDnsRecordManager/CountResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.DnsResponder.DomainManagerService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IDnsRecordManager/CountConfigStoreFaultFaul" +
            "t", Name="ConfigStoreFault")]
        int Count(System.Nullable<Health.Direct.Common.DnsResolver.DnsStandard.RecordType> recordType);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDnsRecordManager/GetLastDnsRecords", ReplyAction="urn:directproject:config/store/082010/IDnsRecordManager/GetLastDnsRecordsResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.DnsResponder.DomainManagerService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IDnsRecordManager/GetLastDnsRecordsConfigSt" +
            "oreFaultFault", Name="ConfigStoreFault")]
        Health.Direct.DnsResponder.DomainManagerService.DnsRecord[] GetLastDnsRecords(long lastRecordID, int maxResults, Health.Direct.Common.DnsResolver.DnsStandard.RecordType typeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDnsRecordManager/GetDnsRecord", ReplyAction="urn:directproject:config/store/082010/IDnsRecordManager/GetDnsRecordResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.DnsResponder.DomainManagerService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IDnsRecordManager/GetDnsRecordConfigStoreFa" +
            "ultFault", Name="ConfigStoreFault")]
        Health.Direct.DnsResponder.DomainManagerService.DnsRecord GetDnsRecord(long recordID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDnsRecordManager/GetDnsRecords", ReplyAction="urn:directproject:config/store/082010/IDnsRecordManager/GetDnsRecordsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.DnsResponder.DomainManagerService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IDnsRecordManager/GetDnsRecordsConfigStoreF" +
            "aultFault", Name="ConfigStoreFault")]
        Health.Direct.DnsResponder.DomainManagerService.DnsRecord[] GetDnsRecords(long[] recordIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDnsRecordManager/GetMatchingDnsRecords", ReplyAction="urn:directproject:config/store/082010/IDnsRecordManager/GetMatchingDnsRecordsResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.DnsResponder.DomainManagerService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IDnsRecordManager/GetMatchingDnsRecordsConf" +
            "igStoreFaultFault", Name="ConfigStoreFault")]
        Health.Direct.DnsResponder.DomainManagerService.DnsRecord[] GetMatchingDnsRecords(string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDnsRecordManager/GetMatchingDnsRecordsByTy" +
            "pe", ReplyAction="urn:directproject:config/store/082010/IDnsRecordManager/GetMatchingDnsRecordsByTy" +
            "peResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.DnsResponder.DomainManagerService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IDnsRecordManager/GetMatchingDnsRecordsByTy" +
            "peConfigStoreFaultFault", Name="ConfigStoreFault")]
        Health.Direct.DnsResponder.DomainManagerService.DnsRecord[] GetMatchingDnsRecordsByType(string domainName, Health.Direct.Common.DnsResolver.DnsStandard.RecordType typeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDnsRecordManager/RemoveDnsRecord", ReplyAction="urn:directproject:config/store/082010/IDnsRecordManager/RemoveDnsRecordResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.DnsResponder.DomainManagerService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IDnsRecordManager/RemoveDnsRecordConfigStor" +
            "eFaultFault", Name="ConfigStoreFault")]
        void RemoveDnsRecord(Health.Direct.DnsResponder.DomainManagerService.DnsRecord dnsRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDnsRecordManager/RemoveDnsRecordByID", ReplyAction="urn:directproject:config/store/082010/IDnsRecordManager/RemoveDnsRecordByIDRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.DnsResponder.DomainManagerService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IDnsRecordManager/RemoveDnsRecordByIDConfig" +
            "StoreFaultFault", Name="ConfigStoreFault")]
        void RemoveDnsRecordByID(long recordID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDnsRecordManager/UpdateDnsRecord", ReplyAction="urn:directproject:config/store/082010/IDnsRecordManager/UpdateDnsRecordResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.DnsResponder.DomainManagerService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IDnsRecordManager/UpdateDnsRecordConfigStor" +
            "eFaultFault", Name="ConfigStoreFault")]
        void UpdateDnsRecord(Health.Direct.DnsResponder.DomainManagerService.DnsRecord dnsRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDnsRecordManager/UpdateDnsRecords", ReplyAction="urn:directproject:config/store/082010/IDnsRecordManager/UpdateDnsRecordsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.DnsResponder.DomainManagerService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IDnsRecordManager/UpdateDnsRecordsConfigSto" +
            "reFaultFault", Name="ConfigStoreFault")]
        void UpdateDnsRecords(Health.Direct.DnsResponder.DomainManagerService.DnsRecord[] dnsRecords);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface IDnsRecordManagerChannel : Health.Direct.DnsResponder.DomainManagerService.IDnsRecordManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class DnsRecordManagerClient : System.ServiceModel.ClientBase<Health.Direct.DnsResponder.DomainManagerService.IDnsRecordManager>, Health.Direct.DnsResponder.DomainManagerService.IDnsRecordManager {
        
        public DnsRecordManagerClient() {
        }
        
        public DnsRecordManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DnsRecordManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DnsRecordManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DnsRecordManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddDnsRecords(Health.Direct.DnsResponder.DomainManagerService.DnsRecord[] dnsRecords) {
            base.Channel.AddDnsRecords(dnsRecords);
        }
        
        public void AddDnsRecord(Health.Direct.DnsResponder.DomainManagerService.DnsRecord record) {
            base.Channel.AddDnsRecord(record);
        }
        
        public int Count(System.Nullable<Health.Direct.Common.DnsResolver.DnsStandard.RecordType> recordType) {
            return base.Channel.Count(recordType);
        }
        
        public Health.Direct.DnsResponder.DomainManagerService.DnsRecord[] GetLastDnsRecords(long lastRecordID, int maxResults, Health.Direct.Common.DnsResolver.DnsStandard.RecordType typeID) {
            return base.Channel.GetLastDnsRecords(lastRecordID, maxResults, typeID);
        }
        
        public Health.Direct.DnsResponder.DomainManagerService.DnsRecord GetDnsRecord(long recordID) {
            return base.Channel.GetDnsRecord(recordID);
        }
        
        public Health.Direct.DnsResponder.DomainManagerService.DnsRecord[] GetDnsRecords(long[] recordIDs) {
            return base.Channel.GetDnsRecords(recordIDs);
        }
        
        public Health.Direct.DnsResponder.DomainManagerService.DnsRecord[] GetMatchingDnsRecords(string domainName) {
            return base.Channel.GetMatchingDnsRecords(domainName);
        }
        
        public Health.Direct.DnsResponder.DomainManagerService.DnsRecord[] GetMatchingDnsRecordsByType(string domainName, Health.Direct.Common.DnsResolver.DnsStandard.RecordType typeID) {
            return base.Channel.GetMatchingDnsRecordsByType(domainName, typeID);
        }
        
        public void RemoveDnsRecord(Health.Direct.DnsResponder.DomainManagerService.DnsRecord dnsRecord) {
            base.Channel.RemoveDnsRecord(dnsRecord);
        }
        
        public void RemoveDnsRecordByID(long recordID) {
            base.Channel.RemoveDnsRecordByID(recordID);
        }
        
        public void UpdateDnsRecord(Health.Direct.DnsResponder.DomainManagerService.DnsRecord dnsRecord) {
            base.Channel.UpdateDnsRecord(dnsRecord);
        }
        
        public void UpdateDnsRecords(Health.Direct.DnsResponder.DomainManagerService.DnsRecord[] dnsRecords) {
            base.Channel.UpdateDnsRecords(dnsRecords);
        }
    }
}
