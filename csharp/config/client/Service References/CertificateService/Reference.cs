//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NHINDirect.Config.Client.CertificateService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CertificateGetOptions", Namespace="http://www.nhindirect.org/config/store/082010")]
    [System.SerializableAttribute()]
    public partial class CertificateGetOptions : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IncludeDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IncludePrivateKeyField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IncludeData {
            get {
                return this.IncludeDataField;
            }
            set {
                if ((this.IncludeDataField.Equals(value) != true)) {
                    this.IncludeDataField = value;
                    this.RaisePropertyChanged("IncludeData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IncludePrivateKey {
            get {
                return this.IncludePrivateKeyField;
            }
            set {
                if ((this.IncludePrivateKeyField.Equals(value) != true)) {
                    this.IncludePrivateKeyField = value;
                    this.RaisePropertyChanged("IncludePrivateKey");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.nhindirect.org/config/store/082010", ConfigurationName="CertificateService.ICertificateStore")]
    public interface ICertificateStore {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/ICertificateStore/AddCertificates", ReplyAction="http://www.nhindirect.org/config/store/082010/ICertificateStore/AddCertificatesRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(NHINDirect.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/ICertificateStore/AddCertificatesCo" +
            "nfigStoreFaultFault", Name="ConfigStoreFault")]
        void AddCertificates(NHINDirect.Config.Store.Certificate[] certificates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/ICertificateStore/GetCertificate", ReplyAction="http://www.nhindirect.org/config/store/082010/ICertificateStore/GetCertificateRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(NHINDirect.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/ICertificateStore/GetCertificateCon" +
            "figStoreFaultFault", Name="ConfigStoreFault")]
        NHINDirect.Config.Store.Certificate GetCertificate(string owner, string thumbprint, NHINDirect.Config.Client.CertificateService.CertificateGetOptions options);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/ICertificateStore/GetCertificates", ReplyAction="http://www.nhindirect.org/config/store/082010/ICertificateStore/GetCertificatesRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(NHINDirect.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/ICertificateStore/GetCertificatesCo" +
            "nfigStoreFaultFault", Name="ConfigStoreFault")]
        NHINDirect.Config.Store.Certificate[] GetCertificates(long[] certificateIDs, NHINDirect.Config.Client.CertificateService.CertificateGetOptions options);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/ICertificateStore/GetCertificatesFo" +
            "rOwner", ReplyAction="http://www.nhindirect.org/config/store/082010/ICertificateStore/GetCertificatesFo" +
            "rOwnerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(NHINDirect.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/ICertificateStore/GetCertificatesFo" +
            "rOwnerConfigStoreFaultFault", Name="ConfigStoreFault")]
        NHINDirect.Config.Store.Certificate[] GetCertificatesForOwner(string owner, NHINDirect.Config.Client.CertificateService.CertificateGetOptions options);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/ICertificateStore/SetCertificateSta" +
            "tus", ReplyAction="http://www.nhindirect.org/config/store/082010/ICertificateStore/SetCertificateSta" +
            "tusResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(NHINDirect.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/ICertificateStore/SetCertificateSta" +
            "tusConfigStoreFaultFault", Name="ConfigStoreFault")]
        void SetCertificateStatus(long[] certificateIDs, NHINDirect.Config.Store.EntityStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/ICertificateStore/SetCertificateSta" +
            "tusForOwner", ReplyAction="http://www.nhindirect.org/config/store/082010/ICertificateStore/SetCertificateSta" +
            "tusForOwnerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(NHINDirect.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/ICertificateStore/SetCertificateSta" +
            "tusForOwnerConfigStoreFaultFault", Name="ConfigStoreFault")]
        void SetCertificateStatusForOwner(string owner, NHINDirect.Config.Store.EntityStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/ICertificateStore/RemoveCertificate" +
            "s", ReplyAction="http://www.nhindirect.org/config/store/082010/ICertificateStore/RemoveCertificate" +
            "sResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(NHINDirect.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/ICertificateStore/RemoveCertificate" +
            "sConfigStoreFaultFault", Name="ConfigStoreFault")]
        void RemoveCertificates(long[] certificateIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/ICertificateStore/RemoveCertificate" +
            "sForOwner", ReplyAction="http://www.nhindirect.org/config/store/082010/ICertificateStore/RemoveCertificate" +
            "sForOwnerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(NHINDirect.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/ICertificateStore/RemoveCertificate" +
            "sForOwnerConfigStoreFaultFault", Name="ConfigStoreFault")]
        void RemoveCertificatesForOwner(string owner);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/ICertificateStore/EnumerateCertific" +
            "ates", ReplyAction="http://www.nhindirect.org/config/store/082010/ICertificateStore/EnumerateCertific" +
            "atesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(NHINDirect.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/ICertificateStore/EnumerateCertific" +
            "atesConfigStoreFaultFault", Name="ConfigStoreFault")]
        NHINDirect.Config.Store.Certificate[] EnumerateCertificates(long lastCertificateID, int maxResults, NHINDirect.Config.Client.CertificateService.CertificateGetOptions options);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface ICertificateStoreChannel : NHINDirect.Config.Client.CertificateService.ICertificateStore, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class CertificateStoreClient : System.ServiceModel.ClientBase<NHINDirect.Config.Client.CertificateService.ICertificateStore>, NHINDirect.Config.Client.CertificateService.ICertificateStore {
        
        public CertificateStoreClient() {
        }
        
        public CertificateStoreClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CertificateStoreClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CertificateStoreClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CertificateStoreClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddCertificates(NHINDirect.Config.Store.Certificate[] certificates) {
            base.Channel.AddCertificates(certificates);
        }
        
        public NHINDirect.Config.Store.Certificate GetCertificate(string owner, string thumbprint, NHINDirect.Config.Client.CertificateService.CertificateGetOptions options) {
            return base.Channel.GetCertificate(owner, thumbprint, options);
        }
        
        public NHINDirect.Config.Store.Certificate[] GetCertificates(long[] certificateIDs, NHINDirect.Config.Client.CertificateService.CertificateGetOptions options) {
            return base.Channel.GetCertificates(certificateIDs, options);
        }
        
        public NHINDirect.Config.Store.Certificate[] GetCertificatesForOwner(string owner, NHINDirect.Config.Client.CertificateService.CertificateGetOptions options) {
            return base.Channel.GetCertificatesForOwner(owner, options);
        }
        
        public void SetCertificateStatus(long[] certificateIDs, NHINDirect.Config.Store.EntityStatus status) {
            base.Channel.SetCertificateStatus(certificateIDs, status);
        }
        
        public void SetCertificateStatusForOwner(string owner, NHINDirect.Config.Store.EntityStatus status) {
            base.Channel.SetCertificateStatusForOwner(owner, status);
        }
        
        public void RemoveCertificates(long[] certificateIDs) {
            base.Channel.RemoveCertificates(certificateIDs);
        }
        
        public void RemoveCertificatesForOwner(string owner) {
            base.Channel.RemoveCertificatesForOwner(owner);
        }
        
        public NHINDirect.Config.Store.Certificate[] EnumerateCertificates(long lastCertificateID, int maxResults, NHINDirect.Config.Client.CertificateService.CertificateGetOptions options) {
            return base.Channel.EnumerateCertificates(lastCertificateID, maxResults, options);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.nhindirect.org/config/store/082010", ConfigurationName="CertificateService.IAnchorStore")]
    public interface IAnchorStore {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/IAnchorStore/AddAnchors", ReplyAction="http://www.nhindirect.org/config/store/082010/IAnchorStore/AddAnchorsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(NHINDirect.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/IAnchorStore/AddAnchorsConfigStoreF" +
            "aultFault", Name="ConfigStoreFault")]
        void AddAnchors(NHINDirect.Config.Store.Anchor[] anchors);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/IAnchorStore/GetAnchors", ReplyAction="http://www.nhindirect.org/config/store/082010/IAnchorStore/GetAnchorsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(NHINDirect.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/IAnchorStore/GetAnchorsConfigStoreF" +
            "aultFault", Name="ConfigStoreFault")]
        NHINDirect.Config.Store.Anchor[] GetAnchors(long[] anchorIDs, NHINDirect.Config.Client.CertificateService.CertificateGetOptions options);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/IAnchorStore/GetAnchorsForOwner", ReplyAction="http://www.nhindirect.org/config/store/082010/IAnchorStore/GetAnchorsForOwnerResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(NHINDirect.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/IAnchorStore/GetAnchorsForOwnerConf" +
            "igStoreFaultFault", Name="ConfigStoreFault")]
        NHINDirect.Config.Store.Anchor[] GetAnchorsForOwner(string owner, NHINDirect.Config.Client.CertificateService.CertificateGetOptions options);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/IAnchorStore/GetIncomingAnchors", ReplyAction="http://www.nhindirect.org/config/store/082010/IAnchorStore/GetIncomingAnchorsResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(NHINDirect.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/IAnchorStore/GetIncomingAnchorsConf" +
            "igStoreFaultFault", Name="ConfigStoreFault")]
        NHINDirect.Config.Store.Anchor[] GetIncomingAnchors(string owner, NHINDirect.Config.Client.CertificateService.CertificateGetOptions options);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/IAnchorStore/GetOutgoingAnchors", ReplyAction="http://www.nhindirect.org/config/store/082010/IAnchorStore/GetOutgoingAnchorsResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(NHINDirect.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/IAnchorStore/GetOutgoingAnchorsConf" +
            "igStoreFaultFault", Name="ConfigStoreFault")]
        NHINDirect.Config.Store.Anchor[] GetOutgoingAnchors(string owner, NHINDirect.Config.Client.CertificateService.CertificateGetOptions options);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/IAnchorStore/EnumerateAnchors", ReplyAction="http://www.nhindirect.org/config/store/082010/IAnchorStore/EnumerateAnchorsRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(NHINDirect.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/IAnchorStore/EnumerateAnchorsConfig" +
            "StoreFaultFault", Name="ConfigStoreFault")]
        NHINDirect.Config.Store.Anchor[] EnumerateAnchors(long lastAnchorID, int maxResults, NHINDirect.Config.Client.CertificateService.CertificateGetOptions options);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/IAnchorStore/RemoveAnchors", ReplyAction="http://www.nhindirect.org/config/store/082010/IAnchorStore/RemoveAnchorsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(NHINDirect.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/IAnchorStore/RemoveAnchorsConfigSto" +
            "reFaultFault", Name="ConfigStoreFault")]
        void RemoveAnchors(long[] anchorIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/IAnchorStore/RemoveAnchorsForOwner", ReplyAction="http://www.nhindirect.org/config/store/082010/IAnchorStore/RemoveAnchorsForOwnerR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(NHINDirect.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/IAnchorStore/RemoveAnchorsForOwnerC" +
            "onfigStoreFaultFault", Name="ConfigStoreFault")]
        void RemoveAnchorsForOwner(string owner);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface IAnchorStoreChannel : NHINDirect.Config.Client.CertificateService.IAnchorStore, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class AnchorStoreClient : System.ServiceModel.ClientBase<NHINDirect.Config.Client.CertificateService.IAnchorStore>, NHINDirect.Config.Client.CertificateService.IAnchorStore {
        
        public AnchorStoreClient() {
        }
        
        public AnchorStoreClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AnchorStoreClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AnchorStoreClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AnchorStoreClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddAnchors(NHINDirect.Config.Store.Anchor[] anchors) {
            base.Channel.AddAnchors(anchors);
        }
        
        public NHINDirect.Config.Store.Anchor[] GetAnchors(long[] anchorIDs, NHINDirect.Config.Client.CertificateService.CertificateGetOptions options) {
            return base.Channel.GetAnchors(anchorIDs, options);
        }
        
        public NHINDirect.Config.Store.Anchor[] GetAnchorsForOwner(string owner, NHINDirect.Config.Client.CertificateService.CertificateGetOptions options) {
            return base.Channel.GetAnchorsForOwner(owner, options);
        }
        
        public NHINDirect.Config.Store.Anchor[] GetIncomingAnchors(string owner, NHINDirect.Config.Client.CertificateService.CertificateGetOptions options) {
            return base.Channel.GetIncomingAnchors(owner, options);
        }
        
        public NHINDirect.Config.Store.Anchor[] GetOutgoingAnchors(string owner, NHINDirect.Config.Client.CertificateService.CertificateGetOptions options) {
            return base.Channel.GetOutgoingAnchors(owner, options);
        }
        
        public NHINDirect.Config.Store.Anchor[] EnumerateAnchors(long lastAnchorID, int maxResults, NHINDirect.Config.Client.CertificateService.CertificateGetOptions options) {
            return base.Channel.EnumerateAnchors(lastAnchorID, maxResults, options);
        }
        
        public void RemoveAnchors(long[] anchorIDs) {
            base.Channel.RemoveAnchors(anchorIDs);
        }
        
        public void RemoveAnchorsForOwner(string owner) {
            base.Channel.RemoveAnchorsForOwner(owner);
        }
    }
}
