//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Health.Direct.Config.Client.DomainManager {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.nhindirect.org/config/store/082010", ConfigurationName="DomainManager.IAddressManager")]
    public interface IAddressManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/IAddressManager/AddAddress", ReplyAction="http://www.nhindirect.org/config/store/082010/IAddressManager/AddAddressResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/IAddressManager/AddAddressConfigSto" +
            "reFaultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Store.Address AddAddress(Health.Direct.Config.Store.Address address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/IAddressManager/AddAddresses", ReplyAction="http://www.nhindirect.org/config/store/082010/IAddressManager/AddAddressesRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/IAddressManager/AddAddressesConfigS" +
            "toreFaultFault", Name="ConfigStoreFault")]
        void AddAddresses(Health.Direct.Config.Store.Address[] addresses);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/IAddressManager/UpdateAddresses", ReplyAction="http://www.nhindirect.org/config/store/082010/IAddressManager/UpdateAddressesResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/IAddressManager/UpdateAddressesConf" +
            "igStoreFaultFault", Name="ConfigStoreFault")]
        void UpdateAddresses(Health.Direct.Config.Store.Address[] address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/IAddressManager/GetAddresses", ReplyAction="http://www.nhindirect.org/config/store/082010/IAddressManager/GetAddressesRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/IAddressManager/GetAddressesConfigS" +
            "toreFaultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Store.Address[] GetAddresses(string[] emailAddresses, System.Nullable<Health.Direct.Config.Store.EntityStatus> status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/IAddressManager/GetAddressesByID", ReplyAction="http://www.nhindirect.org/config/store/082010/IAddressManager/GetAddressesByIDRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/IAddressManager/GetAddressesByIDCon" +
            "figStoreFaultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Store.Address[] GetAddressesByID(long[] addressIDs, System.Nullable<Health.Direct.Config.Store.EntityStatus> status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/IAddressManager/RemoveAddresses", ReplyAction="http://www.nhindirect.org/config/store/082010/IAddressManager/RemoveAddressesResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/IAddressManager/RemoveAddressesConf" +
            "igStoreFaultFault", Name="ConfigStoreFault")]
        void RemoveAddresses(string[] emailAddresses);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/IAddressManager/RemoveDomainAddress" +
            "es", ReplyAction="http://www.nhindirect.org/config/store/082010/IAddressManager/RemoveDomainAddress" +
            "esResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/IAddressManager/RemoveDomainAddress" +
            "esConfigStoreFaultFault", Name="ConfigStoreFault")]
        void RemoveDomainAddresses(long domainID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/IAddressManager/SetDomainAddressesS" +
            "tatus", ReplyAction="http://www.nhindirect.org/config/store/082010/IAddressManager/SetDomainAddressesS" +
            "tatusResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/IAddressManager/SetDomainAddressesS" +
            "tatusConfigStoreFaultFault", Name="ConfigStoreFault")]
        void SetDomainAddressesStatus(long domainID, Health.Direct.Config.Store.EntityStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/IAddressManager/GetAddressCount", ReplyAction="http://www.nhindirect.org/config/store/082010/IAddressManager/GetAddressCountResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/IAddressManager/GetAddressCountConf" +
            "igStoreFaultFault", Name="ConfigStoreFault")]
        int GetAddressCount(string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/IAddressManager/EnumerateDomainAddr" +
            "esses", ReplyAction="http://www.nhindirect.org/config/store/082010/IAddressManager/EnumerateDomainAddr" +
            "essesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/IAddressManager/EnumerateDomainAddr" +
            "essesConfigStoreFaultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Store.Address[] EnumerateDomainAddresses(string domainName, string lastAddress, int maxResults);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/IAddressManager/EnumerateAddresses", ReplyAction="http://www.nhindirect.org/config/store/082010/IAddressManager/EnumerateAddressesR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/IAddressManager/EnumerateAddressesC" +
            "onfigStoreFaultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Store.Address[] EnumerateAddresses(string lastAddress, int maxResults);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface IAddressManagerChannel : Health.Direct.Config.Client.DomainManager.IAddressManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class AddressManagerClient : System.ServiceModel.ClientBase<Health.Direct.Config.Client.DomainManager.IAddressManager>, Health.Direct.Config.Client.DomainManager.IAddressManager {
        
        public AddressManagerClient() {
        }
        
        public AddressManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AddressManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AddressManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AddressManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Health.Direct.Config.Store.Address AddAddress(Health.Direct.Config.Store.Address address) {
            return base.Channel.AddAddress(address);
        }
        
        public void AddAddresses(Health.Direct.Config.Store.Address[] addresses) {
            base.Channel.AddAddresses(addresses);
        }
        
        public void UpdateAddresses(Health.Direct.Config.Store.Address[] address) {
            base.Channel.UpdateAddresses(address);
        }
        
        public Health.Direct.Config.Store.Address[] GetAddresses(string[] emailAddresses, System.Nullable<Health.Direct.Config.Store.EntityStatus> status) {
            return base.Channel.GetAddresses(emailAddresses, status);
        }
        
        public Health.Direct.Config.Store.Address[] GetAddressesByID(long[] addressIDs, System.Nullable<Health.Direct.Config.Store.EntityStatus> status) {
            return base.Channel.GetAddressesByID(addressIDs, status);
        }
        
        public void RemoveAddresses(string[] emailAddresses) {
            base.Channel.RemoveAddresses(emailAddresses);
        }
        
        public void RemoveDomainAddresses(long domainID) {
            base.Channel.RemoveDomainAddresses(domainID);
        }
        
        public void SetDomainAddressesStatus(long domainID, Health.Direct.Config.Store.EntityStatus status) {
            base.Channel.SetDomainAddressesStatus(domainID, status);
        }
        
        public int GetAddressCount(string domainName) {
            return base.Channel.GetAddressCount(domainName);
        }
        
        public Health.Direct.Config.Store.Address[] EnumerateDomainAddresses(string domainName, string lastAddress, int maxResults) {
            return base.Channel.EnumerateDomainAddresses(domainName, lastAddress, maxResults);
        }
        
        public Health.Direct.Config.Store.Address[] EnumerateAddresses(string lastAddress, int maxResults) {
            return base.Channel.EnumerateAddresses(lastAddress, maxResults);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.nhindirect.org/config/store/082010", ConfigurationName="DomainManager.IDomainManager")]
    public interface IDomainManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/IDomainManager/AddDomain", ReplyAction="http://www.nhindirect.org/config/store/082010/IDomainManager/AddDomainResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/IDomainManager/AddDomainConfigStore" +
            "FaultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Store.Domain AddDomain(Health.Direct.Config.Store.Domain domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/IDomainManager/UpdateDomain", ReplyAction="http://www.nhindirect.org/config/store/082010/IDomainManager/UpdateDomainResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/IDomainManager/UpdateDomainConfigSt" +
            "oreFaultFault", Name="ConfigStoreFault")]
        void UpdateDomain(Health.Direct.Config.Store.Domain domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/IDomainManager/GetDomain", ReplyAction="http://www.nhindirect.org/config/store/082010/IDomainManager/GetDomainResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/IDomainManager/GetDomainConfigStore" +
            "FaultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Store.Domain GetDomain(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/IDomainManager/GetDomainCount", ReplyAction="http://www.nhindirect.org/config/store/082010/IDomainManager/GetDomainCountRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/IDomainManager/GetDomainCountConfig" +
            "StoreFaultFault", Name="ConfigStoreFault")]
        int GetDomainCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/IDomainManager/GetDomains", ReplyAction="http://www.nhindirect.org/config/store/082010/IDomainManager/GetDomainsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/IDomainManager/GetDomainsConfigStor" +
            "eFaultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Store.Domain[] GetDomains(string[] domainNames, System.Nullable<Health.Direct.Config.Store.EntityStatus> status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/IDomainManager/RemoveDomain", ReplyAction="http://www.nhindirect.org/config/store/082010/IDomainManager/RemoveDomainResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/IDomainManager/RemoveDomainConfigSt" +
            "oreFaultFault", Name="ConfigStoreFault")]
        void RemoveDomain(string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/IDomainManager/EnumerateDomains", ReplyAction="http://www.nhindirect.org/config/store/082010/IDomainManager/EnumerateDomainsResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/IDomainManager/EnumerateDomainsConf" +
            "igStoreFaultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Store.Domain[] EnumerateDomains(string lastDomainName, int maxResults);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface IDomainManagerChannel : Health.Direct.Config.Client.DomainManager.IDomainManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class DomainManagerClient : System.ServiceModel.ClientBase<Health.Direct.Config.Client.DomainManager.IDomainManager>, Health.Direct.Config.Client.DomainManager.IDomainManager {
        
        public DomainManagerClient() {
        }
        
        public DomainManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DomainManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DomainManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DomainManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Health.Direct.Config.Store.Domain AddDomain(Health.Direct.Config.Store.Domain domain) {
            return base.Channel.AddDomain(domain);
        }
        
        public void UpdateDomain(Health.Direct.Config.Store.Domain domain) {
            base.Channel.UpdateDomain(domain);
        }
        
        public Health.Direct.Config.Store.Domain GetDomain(long id) {
            return base.Channel.GetDomain(id);
        }
        
        public int GetDomainCount() {
            return base.Channel.GetDomainCount();
        }
        
        public Health.Direct.Config.Store.Domain[] GetDomains(string[] domainNames, System.Nullable<Health.Direct.Config.Store.EntityStatus> status) {
            return base.Channel.GetDomains(domainNames, status);
        }
        
        public void RemoveDomain(string domainName) {
            base.Channel.RemoveDomain(domainName);
        }
        
        public Health.Direct.Config.Store.Domain[] EnumerateDomains(string lastDomainName, int maxResults) {
            return base.Channel.EnumerateDomains(lastDomainName, maxResults);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.nhindirect.org/config/store/082010", ConfigurationName="DomainManager.IDnsRecordManager")]
    public interface IDnsRecordManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/IDnsRecordManager/AddDnsRecords", ReplyAction="http://www.nhindirect.org/config/store/082010/IDnsRecordManager/AddDnsRecordsResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/IDnsRecordManager/AddDnsRecordsConf" +
            "igStoreFaultFault", Name="ConfigStoreFault")]
        void AddDnsRecords(Health.Direct.Config.Store.DnsRecord[] dnsRecords);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/IDnsRecordManager/AddDnsRecord", ReplyAction="http://www.nhindirect.org/config/store/082010/IDnsRecordManager/AddDnsRecordRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/IDnsRecordManager/AddDnsRecordConfi" +
            "gStoreFaultFault", Name="ConfigStoreFault")]
        void AddDnsRecord(Health.Direct.Config.Store.DnsRecord record);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/IDnsRecordManager/Count", ReplyAction="http://www.nhindirect.org/config/store/082010/IDnsRecordManager/CountResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/IDnsRecordManager/CountConfigStoreF" +
            "aultFault", Name="ConfigStoreFault")]
        int Count(System.Nullable<Health.Direct.Common.DnsResolver.DnsStandard.RecordType> recordType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/IDnsRecordManager/GetLastDnsRecords" +
            "", ReplyAction="http://www.nhindirect.org/config/store/082010/IDnsRecordManager/GetLastDnsRecords" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/IDnsRecordManager/GetLastDnsRecords" +
            "ConfigStoreFaultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Store.DnsRecord[] GetLastDnsRecords(long lastRecordID, int maxResults, Health.Direct.Common.DnsResolver.DnsStandard.RecordType typeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/IDnsRecordManager/GetDnsRecord", ReplyAction="http://www.nhindirect.org/config/store/082010/IDnsRecordManager/GetDnsRecordRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/IDnsRecordManager/GetDnsRecordConfi" +
            "gStoreFaultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Store.DnsRecord GetDnsRecord(long recordID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/IDnsRecordManager/GetDnsRecords", ReplyAction="http://www.nhindirect.org/config/store/082010/IDnsRecordManager/GetDnsRecordsResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/IDnsRecordManager/GetDnsRecordsConf" +
            "igStoreFaultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Store.DnsRecord[] GetDnsRecords(long[] recordIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/IDnsRecordManager/GetMatchingDnsRec" +
            "ords", ReplyAction="http://www.nhindirect.org/config/store/082010/IDnsRecordManager/GetMatchingDnsRec" +
            "ordsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/IDnsRecordManager/GetMatchingDnsRec" +
            "ordsConfigStoreFaultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Store.DnsRecord[] GetMatchingDnsRecords(string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/IDnsRecordManager/GetMatchingDnsRec" +
            "ordsByType", ReplyAction="http://www.nhindirect.org/config/store/082010/IDnsRecordManager/GetMatchingDnsRec" +
            "ordsByTypeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/IDnsRecordManager/GetMatchingDnsRec" +
            "ordsByTypeConfigStoreFaultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Store.DnsRecord[] GetMatchingDnsRecordsByType(string domainName, Health.Direct.Common.DnsResolver.DnsStandard.RecordType typeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/IDnsRecordManager/RemoveDnsRecord", ReplyAction="http://www.nhindirect.org/config/store/082010/IDnsRecordManager/RemoveDnsRecordRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/IDnsRecordManager/RemoveDnsRecordCo" +
            "nfigStoreFaultFault", Name="ConfigStoreFault")]
        void RemoveDnsRecord(Health.Direct.Config.Store.DnsRecord dnsRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/IDnsRecordManager/RemoveDnsRecordBy" +
            "ID", ReplyAction="http://www.nhindirect.org/config/store/082010/IDnsRecordManager/RemoveDnsRecordBy" +
            "IDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/IDnsRecordManager/RemoveDnsRecordBy" +
            "IDConfigStoreFaultFault", Name="ConfigStoreFault")]
        void RemoveDnsRecordByID(long recordID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/IDnsRecordManager/UpdateDnsRecord", ReplyAction="http://www.nhindirect.org/config/store/082010/IDnsRecordManager/UpdateDnsRecordRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/IDnsRecordManager/UpdateDnsRecordCo" +
            "nfigStoreFaultFault", Name="ConfigStoreFault")]
        void UpdateDnsRecord(Health.Direct.Config.Store.DnsRecord dnsRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nhindirect.org/config/store/082010/IDnsRecordManager/UpdateDnsRecords", ReplyAction="http://www.nhindirect.org/config/store/082010/IDnsRecordManager/UpdateDnsRecordsR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Store.ConfigStoreFault), Action="http://www.nhindirect.org/config/store/082010/IDnsRecordManager/UpdateDnsRecordsC" +
            "onfigStoreFaultFault", Name="ConfigStoreFault")]
        void UpdateDnsRecords(Health.Direct.Config.Store.DnsRecord[] dnsRecords);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface IDnsRecordManagerChannel : Health.Direct.Config.Client.DomainManager.IDnsRecordManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class DnsRecordManagerClient : System.ServiceModel.ClientBase<Health.Direct.Config.Client.DomainManager.IDnsRecordManager>, Health.Direct.Config.Client.DomainManager.IDnsRecordManager {
        
        public DnsRecordManagerClient() {
        }
        
        public DnsRecordManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DnsRecordManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DnsRecordManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DnsRecordManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddDnsRecords(Health.Direct.Config.Store.DnsRecord[] dnsRecords) {
            base.Channel.AddDnsRecords(dnsRecords);
        }
        
        public void AddDnsRecord(Health.Direct.Config.Store.DnsRecord record) {
            base.Channel.AddDnsRecord(record);
        }
        
        public int Count(System.Nullable<Health.Direct.Common.DnsResolver.DnsStandard.RecordType> recordType) {
            return base.Channel.Count(recordType);
        }
        
        public Health.Direct.Config.Store.DnsRecord[] GetLastDnsRecords(long lastRecordID, int maxResults, Health.Direct.Common.DnsResolver.DnsStandard.RecordType typeID) {
            return base.Channel.GetLastDnsRecords(lastRecordID, maxResults, typeID);
        }
        
        public Health.Direct.Config.Store.DnsRecord GetDnsRecord(long recordID) {
            return base.Channel.GetDnsRecord(recordID);
        }
        
        public Health.Direct.Config.Store.DnsRecord[] GetDnsRecords(long[] recordIDs) {
            return base.Channel.GetDnsRecords(recordIDs);
        }
        
        public Health.Direct.Config.Store.DnsRecord[] GetMatchingDnsRecords(string domainName) {
            return base.Channel.GetMatchingDnsRecords(domainName);
        }
        
        public Health.Direct.Config.Store.DnsRecord[] GetMatchingDnsRecordsByType(string domainName, Health.Direct.Common.DnsResolver.DnsStandard.RecordType typeID) {
            return base.Channel.GetMatchingDnsRecordsByType(domainName, typeID);
        }
        
        public void RemoveDnsRecord(Health.Direct.Config.Store.DnsRecord dnsRecord) {
            base.Channel.RemoveDnsRecord(dnsRecord);
        }
        
        public void RemoveDnsRecordByID(long recordID) {
            base.Channel.RemoveDnsRecordByID(recordID);
        }
        
        public void UpdateDnsRecord(Health.Direct.Config.Store.DnsRecord dnsRecord) {
            base.Channel.UpdateDnsRecord(dnsRecord);
        }
        
        public void UpdateDnsRecords(Health.Direct.Config.Store.DnsRecord[] dnsRecords) {
            base.Channel.UpdateDnsRecords(dnsRecords);
        }
    }
}
