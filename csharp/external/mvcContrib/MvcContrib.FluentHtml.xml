<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MvcContrib.FluentHtml</name>
    </assembly>
    <members>
        <member name="T:MvcContrib.FluentHtml.Behaviors.IBehavior`1">
            <summary>
            Generic implementation of behavior for an <see cref="T:MvcContrib.FluentHtml.Behaviors.IBehaviorMarker"/>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MvcContrib.FluentHtml.Behaviors.IBehavior`1.Execute(`0)">
            <summary>
            Perform behavior modification on an object.
            </summary>
            <param name="behavee">The object to modify based on the behavior.</param>
        </member>
        <member name="T:MvcContrib.FluentHtml.Behaviors.BehaviorMarkerExtensions">
            <summary>
            Extensions for IBehaviorMarker
            </summary>
        </member>
        <member name="M:MvcContrib.FluentHtml.Behaviors.BehaviorMarkerExtensions.ApplyTo``1(System.Collections.Generic.IEnumerable{MvcContrib.FluentHtml.Behaviors.IBehaviorMarker},``0)">
            <summary>
            Apply behaviors to an object.
            </summary>
            <param name="behaviors">The behaviors to apply.</param>
            <param name="target">The target element to apply behaviors to.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Behaviors.BehaviorMarkerExtensions.ApplyTo``1(MvcContrib.FluentHtml.Behaviors.IBehaviorMarker,``0)">
            <summary>
            Apply behavior to an object.
            </summary>
            <param name="behavior">The behavior to apply.</param>
            <param name="target">The target element to apply behavior to.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Behaviors.BehaviorHelperExtensions.GetAttribute``1(MvcContrib.FluentHtml.Elements.IMemberElement)">
            <summary>
            Gets the attibute, if esists, of the specified type for the specified element.
            </summary>
            <typeparam name="T">The type of attribute to get.</typeparam>
            <param name="element">The element.</param>
            <returns>The attribute or null if not exists.</returns>
        </member>
        <member name="M:MvcContrib.FluentHtml.Behaviors.BehaviorHelperExtensions.GetAttribute``1(System.Linq.Expressions.MemberExpression)">
            <summary>
            Gets the attibute, if esists, of the specified type for the specified member expression.
            </summary>
            <typeparam name="T">The type of attribute to get.</typeparam>
            <param name="expression">The member expression.</param>
            <returns>The attribute or null if not exists.</returns>
        </member>
        <member name="M:MvcContrib.FluentHtml.Behaviors.BehaviorHelperExtensions.IsTextElement(MvcContrib.FluentHtml.Elements.IElement)">
            <summary>
            Determines whether this is an element that the user enters text into (e.g., input of type text or textarea)
            </summary>
            <param name="e">element</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Behaviors.BehaviorHelperExtensions.GetPropertyOrFieldType(System.Linq.Expressions.MemberExpression)">
            <summary>
            Gets the type of the the member if it's a property or a field.
            </summary>
            <param name="m">The member expression</param>
            <returns>The type or null if the member is not a property or field.</returns>
        </member>
        <member name="M:MvcContrib.FluentHtml.Behaviors.BehaviorHelperExtensions.IsNumber(System.Type)">
            <summary>
            Gets whether the type is a number.
            </summary>
            <param name="t">The type</param>
            <returns>Whether it's a number.</returns>
        </member>
        <member name="M:MvcContrib.FluentHtml.Behaviors.BehaviorHelperExtensions.GetTypeWithoutNullability(System.Type)">
            <summary>
            Gets the type with nullability removed if exists.
            </summary>
            <param name="t">The type</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Behaviors.BehaviorHelperExtensions.IsNullableType(System.Type)">
            <summary>
            Gets whether the types is a nullable type
            </summary>
            <param name="t">The type</param>
        </member>
        <member name="T:MvcContrib.FluentHtml.Behaviors.RequiredCssClassBehavior">
            <summary>
            Adds a CSS class to the element if the it has an attribute of the specified type or 
            if the model member is a non-nullable value type.
            </summary>
        </member>
        <member name="M:MvcContrib.FluentHtml.Behaviors.RequiredCssClassBehavior.#ctor">
            <summary>
            Constructor.  Sets "required" as the class to add.
            </summary>
        </member>
        <member name="M:MvcContrib.FluentHtml.Behaviors.RequiredCssClassBehavior.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="requiredClass">The class to add for required elements.</param>
        </member>
        <member name="T:MvcContrib.FluentHtml.Behaviors.RequiredCssClassBehavior`1">
            <summary>
            Adds a CSS class to the element if the it has an attribute of the specified type or 
            if the model member is a non-nullable value type.
            </summary>
            <typeparam name="TRequiredAttribute"></typeparam>
        </member>
        <member name="T:MvcContrib.FluentHtml.Behaviors.IOrderedBehavior">
            <summary>
            Behavior the specifies an execution order.
            </summary>
        </member>
        <member name="P:MvcContrib.FluentHtml.Behaviors.IOrderedBehavior.Order">
            <summary>
            The order in which the behavior will execute with respect to other ordered behaviors.
            </summary>
        </member>
        <member name="T:MvcContrib.FluentHtml.Behaviors.IOrderedBehavior`1">
            <summary>
            Generic implementation of behavior <see cref="T:MvcContrib.FluentHtml.Behaviors.IOrderedBehavior"/>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MvcContrib.FluentHtml.Behaviors.IOrderedBehavior`1.Execute(`0)">
            <summary>
            Perform behavior modification on an object.
            </summary>
            <param name="behavee">The object to modify based on the behavior.</param>
        </member>
        <member name="T:MvcContrib.FluentHtml.Behaviors.IBehaviorsContainer">
            <summary>
            Contract for any class implementing a list of custom behaviors.
            </summary>
        </member>
        <member name="P:MvcContrib.FluentHtml.Behaviors.IBehaviorsContainer.Behaviors">
            <summary>
            The collection of <see cref="T:MvcContrib.FluentHtml.Behaviors.IBehaviorMarker"/> objects.
            </summary>
        </member>
        <member name="T:MvcContrib.FluentHtml.Behaviors.IModelStateHandler">
            <summary>
            Used internally by the ValidationBehavior to handle ModelState values for a particular element type.
            </summary>
        </member>
        <member name="T:MvcContrib.FluentHtml.Behaviors.ISupportsMaxLength">
            <summary>
            Marker interface indicating that a particular element supports the maxlength HTML attribute.
            </summary>
        </member>
        <member name="T:MvcContrib.FluentHtml.Behaviors.TypeCssClassBehavior">
            <summary>
            Adds CSS classes to the element based on the type of the member.  Specifically handles
            number and date elements.
            </summary>
        </member>
        <member name="M:MvcContrib.FluentHtml.Behaviors.TypeCssClassBehavior.#ctor">
            <summary>
            Constructor.  Sets "number" as the class to add for number elements and "date" for date element.
            </summary>
        </member>
        <member name="M:MvcContrib.FluentHtml.Behaviors.TypeCssClassBehavior.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="numberClass">The class to use for number elements.</param>
            <param name="dateClass">The class to use for date elements.</param>
        </member>
        <member name="T:MvcContrib.FluentHtml.Elements.Button">
            <summary>
            Generate an HTML input element of type 'button.'
            </summary>
        </member>
        <member name="T:MvcContrib.FluentHtml.Elements.ButtonBase`1">
            <summary>
            Base class for HTML input element of type '.'
            </summary>
        </member>
        <member name="T:MvcContrib.FluentHtml.Elements.Input`1">
            <summary>
            Base class for input elements.
            </summary>
            <typeparam name="T">Derived class type.</typeparam>
        </member>
        <member name="T:MvcContrib.FluentHtml.Elements.FormElement`1">
            <summary>
            Base class for form elements.
            </summary>
            <typeparam name="T">Derived type</typeparam>
        </member>
        <member name="T:MvcContrib.FluentHtml.Elements.DisableableElement`1">
            <summary>
            Base class for elements that are disablable.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MvcContrib.FluentHtml.Elements.Element`1">
            <summary>
            Base class for HTML elements.
            </summary>
            <typeparam name="T">The derived class type.</typeparam>
        </member>
        <member name="T:MvcContrib.FluentHtml.Elements.IMemberElement">
            <summary>
            Interface for elements that are associated with a model member.
            </summary>
        </member>
        <member name="T:MvcContrib.FluentHtml.Elements.IElement">
            <summary>
            Interface for elements.
            </summary>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.IElement.SetAttr(System.String,System.Object)">
            <summary>
            Set the value of the specified attribute.
            </summary>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.IElement.GetAttr(System.String)">
            <summary>
            Set the value of the specified attribute.
            </summary>
            <param name="name">The name of the attribute.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.IElement.RemoveAttr(System.String)">
            <summary>
            Remove an attribute.
            </summary>
            <param name="name">The name of the attribute to remove.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.IElement.SetAutoLabel">
            <summary>
            If no label before has been explicitly set, set the label before using the element name.
            </summary>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.IElement.SetAutoLabelAfter">
            <summary>
            If no label after has been explicitly set, set the label after using the element name.
            </summary>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.IElement.AddClass(System.String)">
            <summary>
            Adds the value to the CSS class attribute.
            </summary>
        </member>
        <member name="P:MvcContrib.FluentHtml.Elements.IElement.Builder">
            <summary>
            TagBuilder object used to generate HTML.
            </summary>
        </member>
        <member name="P:MvcContrib.FluentHtml.Elements.IElement.TagRenderMode">
            <summary>
            How the tag should be closed.
            </summary>
        </member>
        <member name="P:MvcContrib.FluentHtml.Elements.IElement.LabelBeforeText">
            <summary>
            The text for the label rendered before the element.
            </summary>
        </member>
        <member name="P:MvcContrib.FluentHtml.Elements.IElement.LabelAfterText">
            <summary>
            The text for the label rendered after the element.
            </summary>
        </member>
        <member name="P:MvcContrib.FluentHtml.Elements.IElement.LabelClass">
            <summary>
            The class for labels rendered before or after the element.
            </summary>
        </member>
        <member name="P:MvcContrib.FluentHtml.Elements.IElement.Metadata">
            <summary>
            Additional JSON metadata that should be added to the element's CSS Class attribute.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:MvcContrib.FluentHtml.Elements.IMemberElement.ForMember" -->
        <member name="M:MvcContrib.FluentHtml.Elements.Element`1.Id(System.String)">
            <summary>
            Set the 'id' attribute.
            </summary>
            <param name="value">The value of the 'id' attribute.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.Element`1.Class(System.String)">
            <summary>
            Add a value to the 'class' attribute.
            </summary>
            <param name="classToAdd">The value of the class to add.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.Element`1.Title(System.String)">
            <summary>
            Set the 'title' attribute.
            </summary>
            <param name="value">The value of the 'title' attribute.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.Element`1.Styles(System.Func{System.String,System.String}[])">
            <summary>
            Set the 'style' attribute.
            </summary>
            <param name="values">A list of funcs, each epxressing a style name value pair.  Replace dashes with 
            underscores in style names. For example 'margin-top:10px;' is expressed as 'margin_top => "10px"'.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.Element`1.OnClick(System.String)">
            <summary>
            Set the 'onclick' attribute.
            </summary>
            <param name="value">The value for the attribute.</param>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.Element`1.Attr(System.String,System.Object)">
            <summary>
            Set the value of a specified attribute.
            </summary>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.Element`1.Label(System.String,System.String)">
            <summary>
            Generate a label before the element.
            </summary>
            <param name="value">The inner text of the label.</param>
            <param name="class">The value of the 'class' attribute for the label.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.Element`1.Label(System.String)">
            <summary>
            Generate a label before the element.
            </summary>
            <param name="value">The inner text of the label.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.Element`1.LabelAfter(System.String,System.String)">
            <summary>
            Generate a label after the element.
            </summary>
            <param name="value">The inner text of the label.</param>
            <param name="class">The value of the 'class' attribute for the label.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.Element`1.LabelAfter(System.String)">
            <summary>
            Generate a label after the element.
            </summary>
            <param name="value">The inner text of the label.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.Element`1.AutoLabel">
            <summary>
            If no label has been explicitly set, set the label using the element name.
            </summary>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.Element`1.AutoLabelAfter">
            <summary>
            If no label before has been explicitly set, set the label before using the element name.
            </summary>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.Element`1.DoNotAutoLabel">
            <summary>
            Prevent this item from being auto labeled.
            </summary>
        </member>
        <member name="P:MvcContrib.FluentHtml.Elements.Element`1.MvcContrib#FluentHtml#Elements#IElement#Builder">
            <summary>
            TagBuilder object used to generate HTML for elements.
            </summary>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.DisableableElement`1.Disabled(System.Boolean)">
            <summary>
            Set the disabled attribute.
            </summary>
            <param name="value">Whether the element should be disabled.</param>
        </member>
        <member name="P:MvcContrib.FluentHtml.Elements.FormElement`1.TagRenderMode">
            <summary>
            Determines how the HTML element is closed.
            </summary>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.Input`1.Value(System.Object)">
            <summary>
            Set the 'value' attribute.
            </summary>
            <param name="value">The value for the attribute.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.Input`1.Size(System.Int32)">
            <summary>
            Set the 'size' attribute.
            </summary>
            <param name="value">The value for the attribute.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.Button.#ctor(System.String)">
            <summary>
            Generate an HTML input element of type 'button.'
            </summary>
            <param name="text">Value of the 'value' and 'name' attributes. Also used to derive the 'id' attribute.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.Button.#ctor(System.String,System.Collections.Generic.IEnumerable{MvcContrib.FluentHtml.Behaviors.IBehaviorMarker})">
            <summary>
            Generate an HTML input element of type 'button.'
            </summary>
            <param name="text">Value of the 'value' and 'name' attributes. Also used to derive the 'id' attribute.</param>
            <param name="behaviors">Behaviors to apply to the element.</param>
        </member>
        <member name="T:MvcContrib.FluentHtml.Elements.CheckBox">
            <summary>
            Generate an HTML input element of type 'checkbox.'
            </summary>
        </member>
        <member name="T:MvcContrib.FluentHtml.Elements.CheckBoxBase`1">
            <summary>
            Base class for HTML input element of type 'checkbox.'
            </summary>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.CheckBoxBase`1.Checked(System.Boolean)">
            <summary>
            Set the checked attribute.
            </summary>
            <param name="value">Whether the checkbox should be checked.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.CheckBox.#ctor(System.String)">
            <summary>
            Generate an HTML input element of type 'checkbox.'
            </summary>
            <param name="name">Value used to set the 'name' an 'id' attributes of the element</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.CheckBox.#ctor(System.String,System.Linq.Expressions.MemberExpression,System.Collections.Generic.IEnumerable{MvcContrib.FluentHtml.Behaviors.IBehaviorMarker})">
            <summary>
            Generate an HTML input element of type 'checkbox.'
            </summary>
            <param name="name">Value of the 'name' attribute of the element.  Also used to derive the 'id' attribute.</param>
            <param name="forMember">Expression indicating the view model member assocaited with the element.</param>
            <param name="behaviors">Behaviors to apply to the element.</param>
        </member>
        <member name="T:MvcContrib.FluentHtml.Elements.CheckBoxList">
            <summary>
            A list of checkboxes buttons.
            </summary>
        </member>
        <member name="T:MvcContrib.FluentHtml.Elements.CheckBoxListBase`1">
            <summary>
            Base class for a list of checkboxes.
            </summary>
        </member>
        <member name="P:MvcContrib.FluentHtml.Elements.OptionsElementBase`1.SelectedValues">
            <summary>
            The selected values.
            </summary>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.CheckBoxListBase`1.Selected(System.Collections.IEnumerable)">
            <summary>
            Set the selected values.
            </summary>
            <param name="selectedValues">Values matching the values of options to be selected.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.CheckBoxListBase`1.ItemFormat(System.String)">
            <summary>
            Specify a format string for the HTML of each checkbox button and label.
            </summary>
            <param name="value">A format string.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.CheckBoxListBase`1.ItemClass(System.String)">
            <summary>
            Specify the class for the input and label elements of each item.
            </summary>
            <param name="value">A format string.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.CheckBoxListBase`1.EachOption(System.Action{MvcContrib.FluentHtml.Elements.CheckBox,System.Object,System.Int32})">
            <summary>
            An action performed after each CheckBox element has been created.  This is useful to
            modify the element before is rendered.
            </summary>
            <param name="action">The action to perform. The parameters to the action are the CheckBox element, 
            the option, and the position of the option.</param>
        </member>
        <member name="T:MvcContrib.FluentHtml.Elements.Label">
            <summary>
            Generate a label (provides no visual difference, but can be tied to an input element to help with naviagation).
            </summary>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.LabelBase`1.Value(System.Object)">
            <summary>
            Set the inner text of the span element.
            </summary>
            <param name="value">The value of the inner text.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.LabelBase`1.Format(System.String)">
            <summary>
            Specify a format string to be applied to the value.  The format string can be either a
            specification (e.g., '$#,##0.00') or a placeholder (e.g., '{0:$#,##0.00}').
            </summary>
            <param name="value">A format string.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.Label.#ctor(System.String,System.Linq.Expressions.MemberExpression,System.Collections.Generic.IEnumerable{MvcContrib.FluentHtml.Behaviors.IBehaviorMarker})">
            <summary>
            Generates a label element.
            </summary>
            <param name="forElement">Value to be used for the 'for' attribute of the element.  Should be the 'id' of the input element this label is for.</param>
            <param name="forMember">Expression indicating the view model member assocaited with the element.</param>
            <param name="behaviors">Behaviors to apply to the element.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.Label.#ctor(System.String)">
            <summary>
            Generates a label element.
            </summary>
            <param name="forElement">Value to be used for the 'for' attribute of the element.  Should be the 'id' of the input element this label is for.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.Label.#ctor">
            <summary>
            Generates a label element.
            </summary>
        </member>
        <member name="T:MvcContrib.FluentHtml.Elements.ResetButton">
            <summary>
            Generate an HTML input element of type 'Reset.'
            </summary>
        </member>
        <member name="T:MvcContrib.FluentHtml.Elements.ResetButtonBase`1">
            <summary>
            Base class for HTML input element of type 'Reset.'
            </summary>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.ResetButton.#ctor(System.String)">
            <summary>
            Generate an HTML input element of type 'Reset.'
            </summary>
            <param name="text">Value of the 'value' and 'name' attributes. Also used to derive the 'id' attribute.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.ResetButton.#ctor(System.String,System.Collections.Generic.IEnumerable{MvcContrib.FluentHtml.Behaviors.IBehaviorMarker})">
            <summary>
            Generate an HTML input element of type 'Reset.'
            </summary>
            <param name="text">Value of the 'value' and 'name' attributes. Also used to derive the 'id' attribute.</param>
            <param name="behaviors">Behaviors to apply to the element.</param>
        </member>
        <member name="T:MvcContrib.FluentHtml.Elements.Index">
            <summary>
            Generates an HTML input element of type 'hidden.'
            </summary>
        </member>
        <member name="T:MvcContrib.FluentHtml.Elements.Hidden">
            <summary>
            Generates an HTML input element of type 'hidden.'
            </summary>
        </member>
        <member name="T:MvcContrib.FluentHtml.Elements.TextInput`1">
            <summary>
            Base class for text input elements.
            </summary>
            <typeparam name="T">The derived type</typeparam>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.TextInput`1.MaxLength(System.Int32)">
            <summary>
            Set the 'maxlength' attribute. 
            </summary>
            <param name="value">Value for the maxlength attribute.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.TextInput`1.Format(System.String)">
            <summary>
            Specify a format string to be applied to the value.  The format string can be either a
            specification (e.g., '$#,##0.00') or a placeholder (e.g., '{0:$#,##0.00}').
            </summary>
            <param name="value">A format string.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.Hidden.#ctor(System.String)">
            <summary>
            Generates an HTML input element of type 'hidden.'
            </summary>
            <param name="name">Value of the 'name' attribute of the element.  Also used to derive the 'id' attribute.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.Hidden.#ctor(System.String,System.Linq.Expressions.MemberExpression,System.Collections.Generic.IEnumerable{MvcContrib.FluentHtml.Behaviors.IBehaviorMarker})">
            <summary>
            Generates an HTML input element of type 'hidden.'
            </summary>
            <param name="name">Value of the 'name' attribute of the element.  Also used to derive the 'id' attribute.</param>
            <param name="forMember">Expression indicating the model member assocaited with the element.</param>
            <param name="behaviors">Behaviors to apply to the element.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.Index.#ctor(System.String)">
            <summary>
            Generates an HTML input element of type 'hidden' with '.Index" appended to the name.
            </summary>
            <param name="baseName">Base value of the 'name' attribute of the element.  Also used to derive the 'id' attribute.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.Index.#ctor(System.String,System.Linq.Expressions.MemberExpression,System.Collections.Generic.IEnumerable{MvcContrib.FluentHtml.Behaviors.IBehaviorMarker})">
            <summary>
            Generates an HTML input element of type 'hidden' with '.Index" appended to the name.
            </summary>
            <param name="baseName">Base value of the 'name' attribute of the element.  Also used to derive the 'id' attribute.</param>
            <param name="forMember">Expression indicating the model member assocaited with the element.</param>
            <param name="behaviors">Behaviors to apply to the element.</param>
        </member>
        <member name="T:MvcContrib.FluentHtml.Elements.FileUpload">
            <summary>
            Generates an input element of type 'file.'
            </summary>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.FileUpload.#ctor(System.String)">
            <summary>
            Generates an input element of type 'file.'
            </summary>
            <param name="name">Value of the 'name' attribute of the element. Also used to derive the 'id' attribute.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.FileUpload.#ctor(System.String,System.Collections.Generic.IEnumerable{MvcContrib.FluentHtml.Behaviors.IBehaviorMarker})">
            <summary>
            Generates an input element of type 'file.'
            </summary>
            <param name="name">Value of the 'name' attribute of the element. Also used to derive the 'id' attribute.</param>
            <param name="behaviors">Behaviors to apply to the element.</param>
        </member>
        <member name="T:MvcContrib.FluentHtml.Elements.FormLiteral">
            <summary>
            Generates a literal element (span) accompanied by a hidden input element having the same value.  Use this 
            if you want to display a value and also have that same value be included in the form post.
            </summary>
        </member>
        <member name="T:MvcContrib.FluentHtml.Elements.FormLiteralBase`1">
            <summary>
            Base class to generate a literal element (span) accompanied by a hidden input element having the same 
            value.  Use this if you want to display a value and also have that same value be included in the form post.
            </summary>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.FormLiteral.#ctor(System.String,System.Linq.Expressions.MemberExpression,System.Collections.Generic.IEnumerable{MvcContrib.FluentHtml.Behaviors.IBehaviorMarker})">
            <summary>
            Generates a literal element (span) accompanied by a hidden input element having the same value.  Use 
            this if you want to display a value and also have that same value be included in the form post.
            </summary>
            <param name="name">Value of the 'name' attribute of the element.  Also used to derive the 'id' attribute.</param>
            <param name="forMember">Expression indicating the view model member assocaited with the element</param>
            <param name="behaviors">Behaviors to apply to the element</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.FormLiteral.#ctor(System.String)">
            <summary>
            Generates a literal element (span) accompanied by a hidden input element having the same value.  Use 
            this if you want to display a value and also have that same value be included in the form post.
            </summary>
            <param name="name">Value used to set the 'name' an 'id' attributes of the element.</param>
        </member>
        <member name="T:MvcContrib.FluentHtml.Elements.LiteralBase`1">
            <summary>
            Base class for a literal (text inside a span element).
            </summary>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.LiteralBase`1.Value(System.Object)">
            <summary>
            Set the inner text of the span element.
            </summary>
            <param name="value">The value of the inner text.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.LiteralBase`1.Html(System.String)">
            <summary>
            Set the inner HTML of the span element.
            </summary>
            <param name="value">The HTML.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.LiteralBase`1.Format(System.String)">
            <summary>
            Specify a format string to be applied to the value.  The format string can be either a
            specification (e.g., '$#,##0.00') or a placeholder (e.g., '{0:$#,##0.00}').
            </summary>
            <param name="value">A format string.</param>
        </member>
        <member name="T:MvcContrib.FluentHtml.Elements.RadioButton">
            <summary>
            A radio button.
            </summary>
        </member>
        <member name="T:MvcContrib.FluentHtml.Elements.RadioButtonBase`1">
            <summary>
            Base class for a radio button.
            </summary>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.RadioButtonBase`1.Checked(System.Boolean)">
            <summary>
            Set the checked attribute.
            </summary>
            <param name="value">Whether the radio button should be checked.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.RadioButtonBase`1.Format(System.String)">
            <summary>
            Specify a format string for the HTML output.
            </summary>
            <param name="format">A format string.</param>
        </member>
        <member name="T:MvcContrib.FluentHtml.Elements.RadioSet">
            <summary>
            A set of radio buttons.
            </summary>
        </member>
        <member name="T:MvcContrib.FluentHtml.Elements.RadioSetBase`1">
            <summary>
            Base class for a set of radio buttons.
            </summary>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.RadioSetBase`1.Selected(System.Object)">
            <summary>
            Set the selected option.
            </summary>
            <param name="selectedValue">A value matching the option to be selected.</param>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.RadioSetBase`1.ItemFormat(System.String)">
            <summary>
            Specify a format string for the HTML of each radio button and label.
            </summary>
            <param name="format">A format string.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.RadioSetBase`1.ItemClass(System.String)">
            <summary>
            Specify the class for the input and label elements of each item.
            </summary>
            <param name="value">A format string.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.RadioSetBase`1.EachOption(System.Action{MvcContrib.FluentHtml.Elements.RadioButton,System.Object,System.Int32})">
            <summary>
            An action performed after each RadioButton element has been created.  This is useful to
            modify the element before is rendered.
            </summary>
            <param name="action">The action to perform. The parameters to the action are the RadioButton element, 
            the option, and the position of the option.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.TypeStamp.#ctor(System.String,System.Type)">
            <summary>
            Generates an HTML input element of type 'hidden' that denotes an instance type stamp
            </summary>
            <param name="name">Value of the 'name' attribute of the element.  Also used to derive the 'id' attribute.</param>
            <param name="instanceType">instance type information to be recorded</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.ModelStateDictionaryExtensions.AddModelError``1(System.Web.Mvc.ModelStateDictionary,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            Adds an error to the current model state.
            </summary>
            <typeparam name="T">The view model your view is using.</typeparam>
            <param name="modelState">The current model state.</param>
            <param name="keyExpression">An expression specifying the property on the view model to add an error for.</param>
            <param name="errorMessage">The error message you're adding for the specified property.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.ModelStateDictionaryExtensions.AddModelError``1(System.Web.Mvc.ModelStateDictionary,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Exception)">
            <summary>
            Adds an error to the current model state.
            </summary>
            <typeparam name="T">The view model your view is using.</typeparam>
            <param name="modelState">The current model state.</param>
            <param name="keyExpression">An expression specifying the property on the view model to add an error for.</param>
            <param name="exception">The exception you're adding for the specified property.</param>
        </member>
        <member name="T:MvcContrib.FluentHtml.PartialNameConventionService">
            <summary>
            provides the naming service and ability to change naming convention for typed partials
            </summary>
        </member>
        <member name="M:MvcContrib.FluentHtml.PartialNameConventionService.GeneratePartialName(System.Type)">
            <summary>
            Creates a partial name based on the name convention
            </summary>
            <param name="targetType">the targeted type to be rendered</param>
            <returns>name according to convention</returns>
        </member>
        <member name="P:MvcContrib.FluentHtml.PartialNameConventionService.PartialNameConvention">
            <summary>
            Partial name convention for strongly typed views.
            </summary>
        </member>
        <member name="M:MvcContrib.FluentHtml.PartialRenderer`2.RenderTypedPartial(System.Type)">
            <summary>
            Responsible for getting the derived partial, setting up associated data and
            invoking the partial.
            </summary>
            <param name="instanceType">instanceType being passed to the partial</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.StringExtensions.PascalCaseToPhrase(System.String)">
            <summary>
            Converts pascal case string into a phrase.  Treats consecutive capital 
            letters as a word.  For example, 'HasABCDAcronym' would be tranformed to
            'Has ABCD Acronym'
            </summary>
            <param name="s">A string containing pascal case words</param>
        </member>
        <member name="T:MvcContrib.FluentHtml.Elements.SubmitButtonBase`1">
            <summary>
            Base class for HTML input element of type 'submit.'
            </summary>
        </member>
        <member name="T:MvcContrib.FluentHtml.Elements.TextAreaBase`1">
            <summary>
            base class for an HTML textarea element.
            </summary>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.TextAreaBase`1.Value(System.Object)">
            <summary>
            Set the inner text.
            </summary>
            <param name="value">The value of the inner text.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MvcContrib.FluentHtml.Elements.TextAreaBase`1.Rows(System.Int32)" -->
        <member name="M:MvcContrib.FluentHtml.Elements.TextAreaBase`1.Columns(System.Int32)">
            <summary>
            Set the 'columns' attribute.
            </summary>
            <param name="value">The value of the columns attribute.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.TextAreaBase`1.Format(System.String)">
            <summary>
            Specify a format string to be applied to the value.  The format string can be either a
            specification (e.g., '$#,##0.00') or a placeholder (e.g., '{0:$#,##0.00}').
            </summary>
            <param name="value">A format string.</param>
        </member>
        <member name="T:MvcContrib.FluentHtml.Elements.ValidationMessage">
            <summary>
            Generate a validation message (text inside a span element).
            </summary>
        </member>
        <member name="T:MvcContrib.FluentHtml.Elements.Literal">
            <summary>
            Generate a literal (text inside a span element).
            </summary>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.Literal.#ctor(System.String,System.Linq.Expressions.MemberExpression,System.Collections.Generic.IEnumerable{MvcContrib.FluentHtml.Behaviors.IBehaviorMarker})">
            <summary>
            Generates a literal element (span).
            </summary>
            <param name="name">The name of the element.</param>
            <param name="forMember">Expression indicating the view model member assocaited with the element</param>
            <param name="behaviors">Behaviors to apply to the element</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.Literal.#ctor(System.String)">
            <summary>
            Generates a literal element (span).
            </summary>
            <param name="name">The name of the element.</param>
        </member>
        <member name="T:MvcContrib.FluentHtml.Elements.MultiSelect">
            <summary>
            Generate a select HTML element with multiselect attribute = 'true.'
            </summary>
        </member>
        <member name="T:MvcContrib.FluentHtml.Elements.SelectBase`1">
            <summary>
            Base class for select elements.
            </summary>
            <typeparam name="T">The derived type.</typeparam>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.SelectBase`1.Size(System.Int32)">
            <summary>
            Set the 'size' attribute.
            </summary>
            <param name="value">The value of the 'size' attribute.</param>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.SelectBase`1.FirstOption(MvcContrib.FluentHtml.Elements.Option)">
            <summary>
            Uses the specified open as the first option in the select.
            </summary>
            <param name="firstOption">The first option</param>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.SelectBase`1.FirstOption(System.String)">
            <summary>
            Specifies the text for the first option. The value for the first option will be an empty string.
            </summary>
            <param name="text">The text for the first option</param>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.SelectBase`1.FirstOption(System.String,System.String)">
            <summary>
            Specifies the value and text for the first option.
            </summary>
            <param name="value">The value for the first option. If ommitted, will default to an empty string.</param>
            <param name="text">The text for the first option. If ommitted, will the default to an empty string.</param>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.SelectBase`1.HideFirstOptionWhen(System.Boolean)">
            <summary>
            Hides the first option when the value passed in is true. 
            </summary>
            <param name="hideFirstOption">True to hide the first option, otherwise false.</param>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.SelectBase`1.EachOption(System.Action{MvcContrib.FluentHtml.Elements.Option,System.Object,System.Int32})">
            <summary>
            An action performed after each Option element has been created.  This is useful to
            modify the element before is rendered.
            </summary>
            <param name="action">The action to perform. The parameters to the action are the Option element, 
            the option item, and the position of the option.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.MultiSelect.#ctor(System.String)">
            <summary>
            Generate a select HTML element with multiselect attribute = 'true.'
            </summary>
            <param name="name">Value of the 'name' attribute of the element.  Also used to derive the 'id' attribute.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.MultiSelect.#ctor(System.String,System.Linq.Expressions.MemberExpression,System.Collections.Generic.IEnumerable{MvcContrib.FluentHtml.Behaviors.IBehaviorMarker})">
            <summary>
            Generate a select HTML element with multiselect attribute = 'true'
            </summary>
            <param name="name">Value of the 'name' attribute of the element.  Also used to derive the 'id' attribute.</param>
            <param name="forMember">Expression indicating the view model member assocaited with the element</param>
            <param name="behaviors">Behaviors to apply to the element</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.MultiSelect.Selected(System.Collections.IEnumerable)">
            <summary>
            Set the selected values.
            </summary>
            <param name="selectedValues">Values matching the values of options to be selected.</param>
        </member>
        <member name="T:MvcContrib.FluentHtml.Elements.MultiSelect`1">
            <summary>
            Generate a select HTML element with multiselect attribute = 'true.'
            </summary>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.MultiSelect`1.#ctor(System.String)">
            <summary>
            Generate a select HTML element with multiselect attribute = 'true.'
            </summary>
            <param name="name">Value of the 'name' attribute of the element.  Also used to derive the 'id' attribute.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.MultiSelect`1.#ctor(System.String,System.Linq.Expressions.MemberExpression,System.Collections.Generic.IEnumerable{MvcContrib.FluentHtml.Behaviors.IBehaviorMarker})">
            <summary>
            Generate a select HTML element with multiselect attribute = 'true'
            </summary>
            <param name="name">Value of the 'name' attribute of the element.  Also used to derive the 'id' attribute.</param>
            <param name="forMember">Expression indicating the view model member assocaited with the element</param>
            <param name="behaviors">Behaviors to apply to the element</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.MultiSelect`1.Selected(System.Collections.IEnumerable)">
            <summary>
            Set the selected values.
            </summary>
            <param name="selectedValues">Values matching the values of options to be selected.</param>
        </member>
        <member name="T:MvcContrib.FluentHtml.Elements.Option">
            <summary>
            Generate a select option.
            </summary>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.Option.#ctor">
            <summary>
            Generate a select option.
            </summary>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.Option.Value(System.String)">
            <summary>
            Set the value of the 'value' attribute.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.Option.Text(System.String)">
            <summary>
            Set the inner text.
            </summary>
            <param name="value">The value of the inner text.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.Option.Selected(System.Boolean)">
            <summary>
            Set the selected attribute.
            </summary>
            <param name="value">Whether the option should be selected.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.Option.Disabled(System.Boolean)">
            <summary>
            Set as disabled or enabled.
            </summary>
            <param name="value">Whether the option is disabled.</param>
        </member>
        <member name="T:MvcContrib.FluentHtml.Elements.Password">
            <summary>
            Generate an HTML input element of type 'password.'
            </summary>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.Password.#ctor(System.String)">
            <summary>
            Generate an HTML input element of type 'password.'
            </summary>
            <param name="name">Value of the 'name' attribute of the element.  Also used to derive the 'id' attribute.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.Password.#ctor(System.String,System.Linq.Expressions.MemberExpression,System.Collections.Generic.IEnumerable{MvcContrib.FluentHtml.Behaviors.IBehaviorMarker})">
            <summary>
            Generate an HTML input element of type 'password.'
            </summary>
            <param name="name">Value of the 'name' attribute of the element.  Also used to derive the 'id' attribute.</param>
            <param name="forMember">Expression indicating the model member assocaited with the element.</param>
            <param name="behaviors">Behaviors to apply to the element.</param>
        </member>
        <member name="T:MvcContrib.FluentHtml.Elements.Select">
            <summary>
            Generate and HTML select element.
            </summary>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.Select.#ctor(System.String)">
            <summary>
            Generate an HTML select element.
            </summary>
            <param name="name">Value of the 'name' attribute of the element.  Also used to derive the 'id' attribute.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.Select.#ctor(System.String,System.Linq.Expressions.MemberExpression,System.Collections.Generic.IEnumerable{MvcContrib.FluentHtml.Behaviors.IBehaviorMarker})">
            <summary>
            Generate an HTML select element.
            </summary>
            <param name="name">Value of the 'name' attribute of the element.  Also used to derive the 'id' attribute.</param>
            <param name="forMember">Expression indicating the model member assocaited with the element.</param>
            <param name="behaviors">Behaviors to apply to the element.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.Select.Selected(System.Object)">
            <summary>
            Set the selected option.
            </summary>
            <param name="selectedValue">A value matching the option to be selected.</param>
            <returns></returns>
        </member>
        <member name="T:MvcContrib.FluentHtml.Elements.Select`1">
            <summary>
            Generate and HTML select element.
            </summary>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.Select`1.#ctor(System.String)">
            <summary>
            Generate an HTML select element.
            </summary>
            <param name="name">Value of the 'name' attribute of the element.  Also used to derive the 'id' attribute.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.Select`1.#ctor(System.String,System.Linq.Expressions.MemberExpression,System.Collections.Generic.IEnumerable{MvcContrib.FluentHtml.Behaviors.IBehaviorMarker})">
            <summary>
            Generate an HTML select element.
            </summary>
            <param name="name">Value of the 'name' attribute of the element.  Also used to derive the 'id' attribute.</param>
            <param name="forMember">Expression indicating the model member assocaited with the element.</param>
            <param name="behaviors">Behaviors to apply to the element.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.Select`1.Selected(System.Object)">
            <summary>
            Set the selected option.
            </summary>
            <param name="selectedValue">A value matching the option to be selected.</param>
            <returns></returns>
        </member>
        <member name="T:MvcContrib.FluentHtml.Elements.SubmitButton">
            <summary>
            Generate an HTML input element of type 'submit.'
            </summary>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.SubmitButton.#ctor(System.String)">
            <summary>
            Generate an HTML input element of type 'submit.'
            </summary>
            <param name="text">Value of the 'value' and 'name' attributes. Also used to derive the 'id' attribute.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.SubmitButton.#ctor(System.String,System.Collections.Generic.IEnumerable{MvcContrib.FluentHtml.Behaviors.IBehaviorMarker})">
            <summary>
            Generate an HTML input element of type 'submit.'
            </summary>
            <param name="text">Value of the 'value' and 'name' attributes. Also used to derive the 'id' attribute.</param>
            <param name="behaviors">Behaviors to apply to the element.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.TextArea.#ctor(System.String)">
            <summary>
            Generate an HTML textarea element.
            </summary>
            <param name="name">Value of the 'name' attribute of the element.  Also used to derive the 'id' attribute.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.TextArea.#ctor(System.String,System.Linq.Expressions.MemberExpression,System.Collections.Generic.IEnumerable{MvcContrib.FluentHtml.Behaviors.IBehaviorMarker})">
            <summary>
            Generate an HTML textarea element.
            </summary>
            <param name="name">Value of the 'name' attribute of the element.  Also used to derive the 'id' attribute.</param>
            <param name="forMember">Expression indicating the view model member assocaited with the element</param>
            <param name="behaviors">Behaviors to apply to the element</param>
        </member>
        <member name="T:MvcContrib.FluentHtml.Elements.TextBox">
            <summary>
            Generate an HTML input element of type 'text.'
            </summary>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.TextBox.#ctor(System.String)">
            <summary>
            Generate an HTML input element of type 'text.'
            </summary>
            <param name="name">Value of the 'name' attribute of the element.  Also used to derive the 'id' attribute.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.Elements.TextBox.#ctor(System.String,System.Linq.Expressions.MemberExpression,System.Collections.Generic.IEnumerable{MvcContrib.FluentHtml.Behaviors.IBehaviorMarker})">
            <summary>
            Generate an HTML input element of type 'text.'
            </summary>
            <param name="name">Value of the 'name' attribute of the element.  Also used to derive the 'id' attribute.</param>
            <param name="forMember">Expression indicating the view model member assocaited with the element</param>
            <param name="behaviors">Behaviors to apply to the element</param>
        </member>
        <member name="T:MvcContrib.FluentHtml.ViewDataContainerExtensions">
            <summary>
            Extensions to IViewDataContainer
            </summary>
        </member>
        <member name="M:MvcContrib.FluentHtml.ViewDataContainerExtensions.TextBox(System.Web.Mvc.IViewDataContainer,System.String)">
            <summary>
            Generate an HTML input element of type 'text' and set its value from ViewData based on the name provided.
            </summary>
            <param name="view">The view.</param>
            <param name="name">Value of the 'name' attribute of the element.  Also used to derive the 'id' attribute.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.ViewDataContainerExtensions.Password(System.Web.Mvc.IViewDataContainer,System.String)">
            <summary>
            Generate an HTML input element of type 'password' and set its value from ViewData based on the name provided.
            </summary>
            <param name="view">The view.</param>
            <param name="name">Value of the 'name' attribute of the element.  Also used to derive the 'id' attribute.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.ViewDataContainerExtensions.Select(System.Web.Mvc.IViewDataContainer,System.String)">
            <summary>
            Generate an HTML select element and set its selected value from ViewData based on the name provided.
            </summary>
            <param name="view">The view.</param>
            <param name="name">Value of the 'name' attribute of the element.  Also used to derive the 'id' attribute.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.ViewDataContainerExtensions.MultiSelect(System.Web.Mvc.IViewDataContainer,System.String)">
            <summary>
            Generate an HTML select element with a multiselect attribute = 'true' and set its selected 
            values from ViewData based on the name provided.
            </summary>
            <param name="view">The view.</param>
            <param name="name">Value of the 'name' attribute of the element.  Also used to derive the 'id' attribute.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.ViewDataContainerExtensions.Hidden(System.Web.Mvc.IViewDataContainer,System.String)">
            <summary>
            Generate an HTML input element of type 'hidden' and set its value from ViewData based on the name provided.
            </summary>
            <param name="view">The view.</param>
            <param name="name">Value of the 'name' attribute of the element.  Also used to derive the 'id' attribute.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.ViewDataContainerExtensions.TextArea(System.Web.Mvc.IViewDataContainer,System.String)">
            <summary>
            Generate an HTML textarea element and set the value from ViewData.
            </summary>
            <param name="view">The view.</param>
            <param name="name">Value of the 'name' attribute of the element.  Also used to derive the 'id' attribute.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.ViewDataContainerExtensions.CheckBox(System.Web.Mvc.IViewDataContainer,System.String)">
            <summary>
            Generate an HTML input element of type 'checkbox' and set checked from ViewData based on the name provided.
            The checkbox element has an accompanying input element of type 'hidden' to support binding upon form post.
            </summary>
            <param name="view">The view.</param>
            <param name="name">Value of the 'name' attribute of the element.  Also used to derive the 'id' attribute.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.ViewDataContainerExtensions.CheckBoxList(System.Web.Mvc.IViewDataContainer,System.String)">
            <summary>
            Generate a list of HTML input elements of type 'checkbox' and set its value from the ViewModel based on the expression provided.
            Each checkbox element has an accompanying input element of type 'hidden' to support binding upon form post.
            </summary>
            <param name="view">The view.</param>
            <param name="name">Value of the 'name' attribute of the element.  Also used to derive the 'id' attribute.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.ViewDataContainerExtensions.SubmitButton(System.Web.Mvc.IViewDataContainer,System.String)">
            <summary>
            Generate an HTML input element of type 'submit.'
            </summary>
            <param name="view">The view.</param>
            <param name="text">Value of the 'value' and 'name' attributes.  Also used to derive the 'id' attribute.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.ViewDataContainerExtensions.Button(System.Web.Mvc.IViewDataContainer,System.String)">
            <summary>
            Generate an HTML input element of type 'button.'
            </summary>
            <param name="view">The view.</param>
            <param name="text">Value of the 'value' and 'name' attributes.  Also used to derive the 'id' attribute.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.ViewDataContainerExtensions.ResetButton(System.Web.Mvc.IViewDataContainer,System.String)">
            <summary>
            Generate an HTML input element of type 'reset.'
            </summary>
            <param name="view">The view.</param>
            <param name="text">Value of the 'value' and 'name' attributes.  Also used to derive the 'id' attribute.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.ViewDataContainerExtensions.Label(System.Web.Mvc.IViewDataContainer,System.String)">
            <summary>
            Generate an HTML label element;
            </summary>
            <param name="view">The view.</param>
            <param name="forName">The id of the target element to point to in the 'for' attribute.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.ViewDataContainerExtensions.Literal(System.Web.Mvc.IViewDataContainer,System.Object)">
            <summary>
            Generate an HTML span element.
            </summary>
            <param name="view">The view.</param>
            <param name="value">The inner text.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.ViewDataContainerExtensions.Literal(System.Web.Mvc.IViewDataContainer,System.String,System.Object)">
            <summary>
            Generate an HTML span element.
            </summary>
            <param name="view">The view.</param>
            <param name="name">The name of the element.</param>
            <param name="value">The inner text.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.ViewDataContainerExtensions.FormLiteral(System.Web.Mvc.IViewDataContainer,System.String)">
            <summary>
            Generate an HTML span element and an HTML input element of type 'hidden' and set the inner text
            of the span and the value of the hidden input element from ViewData based on the specified name.
            </summary>
            <param name="view">The view.</param>
            <param name="name">Value of the 'name' attribute of the element.  Also used to derive the 'id' attribute.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.ViewDataContainerExtensions.FileUpload(System.Web.Mvc.IViewDataContainer,System.String)">
            <summary>
            Generate an HTML input element of type 'file' and set its value from ViewData based on the name provided.
            </summary>
            <param name="view">The view.</param>
            <param name="name">Value of the 'name' attribute of the element.  Also used to derive the 'id' attribute.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.ViewDataContainerExtensions.RadioButton(System.Web.Mvc.IViewDataContainer,System.String)">
            <summary>
            Generate an HTML input element of type 'radio.'
            </summary>
            <param name="view">The view.</param>
            <param name="name">Value of the 'name' attribute of the of the input elements.  Also used to derive the 'id' attributes.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.ViewDataContainerExtensions.RadioSet(System.Web.Mvc.IViewDataContainer,System.String)">
            <summary>
            Generate a set of HTML input elements of type 'radio' -- each wrapped inside a label.  The whole thing is wrapped in an HTML 
            div element.  The values of the input elements and he label text are taken from the options specified.
            </summary>
            <param name="view">The view.</param>
            <param name="name">Value of the 'name' attribute of the of the input elements.  Also used to derive the 'id' attributes.</param>
        </member>
        <member name="T:MvcContrib.FluentHtml.ViewModelContainerExtensions">
            <summary>
            Extensions of IViewModelContainer&lt;T&gt;
            </summary>
        </member>
        <member name="M:MvcContrib.FluentHtml.ViewModelContainerExtensions.TextBox``1(MvcContrib.FluentHtml.IViewModelContainer{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Generate an HTML input element of type 'text' and set its value from the ViewModel based on the expression provided.
            </summary>
            <typeparam name="T">The type of the ViewModel.</typeparam>
            <param name="view">The view.</param>
            <param name="expression">Expression indicating the ViewModel member associated with the element.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.ViewModelContainerExtensions.Password``1(MvcContrib.FluentHtml.IViewModelContainer{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Generate an HTML input element of type 'password' and set its value from the ViewModel based on the expression provided.
            </summary>
            <typeparam name="T">The type of the ViewModel.</typeparam>
            <param name="view">The view.</param>
            <param name="expression">Expression indicating the ViewModel member associated with the element.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.ViewModelContainerExtensions.Hidden``1(MvcContrib.FluentHtml.IViewModelContainer{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Generate an HTML input element of type 'hidden' and set its value from the ViewModel based on the expression provided.
            </summary>
            <typeparam name="T">The type of the ViewModel.</typeparam>
            <param name="view">The view.</param>
            <param name="expression">Expression indicating the ViewModel member associated with the element.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.ViewModelContainerExtensions.CheckBox``1(MvcContrib.FluentHtml.IViewModelContainer{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Generate an HTML input element of type 'checkbox' and set its value from the ViewModel based on the expression provided.
            The checkbox element has an accompanying input element of type 'hidden' to support binding upon form post.
            </summary>
            <typeparam name="T">The type of the ViewModel.</typeparam>
            <param name="view">The view.</param>
            <param name="expression">Expression indicating the ViewModel member associated with the element.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.ViewModelContainerExtensions.CheckBoxList``1(MvcContrib.FluentHtml.IViewModelContainer{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Generate a list of HTML input elements of type 'checkbox' and set its value from the ViewModel based on the expression provided.
            Each checkbox element has an accompanying input element of type 'hidden' to support binding upon form post.
            </summary>
            <typeparam name="T">The type of the ViewModel.</typeparam>
            <param name="view">The view.</param>
            <param name="expression">Expression indicating the ViewModel member associated with the element.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.ViewModelContainerExtensions.TextArea``1(MvcContrib.FluentHtml.IViewModelContainer{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Generate an HTML textarea element and set its value from the ViewModel based on the expression provided.
            </summary>
            <typeparam name="T">The type of the ViewModel.</typeparam>
            <param name="view">The view.</param>
            <param name="expression">Expression indicating the ViewModel member associated with the element.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.ViewModelContainerExtensions.Select``1(MvcContrib.FluentHtml.IViewModelContainer{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Generate an HTML select element and set the selected option value from the ViewModel based on the expression provided.
            </summary>
            <typeparam name="T">The type of the ViewModel.</typeparam>
            <param name="view">The view.</param>
            <param name="expression">Expression indicating the ViewModel member associated with the element.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.ViewModelContainerExtensions.MultiSelect``1(MvcContrib.FluentHtml.IViewModelContainer{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Generate an HTML select element and set the selected options from the ViewModel based on the expression provided.
            </summary>
            <typeparam name="T">The type of the ViewModel.</typeparam>
            <param name="view">The view.</param>
            <param name="expression">Expression indicating the ViewModel member associated with the element.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.ViewModelContainerExtensions.Label``1(MvcContrib.FluentHtml.IViewModelContainer{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Generate an HTML label element, point its "for" attribute to the input element from the provided expression, and set its inner text from the ViewModel based on the expression provided.
            </summary>
            <typeparam name="T">The type of the ViewModel.</typeparam>
            <param name="view">The view.</param>
            <param name="expression">Expression indicating the ViewModel member that has an input element associated with it.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.ViewModelContainerExtensions.Literal``1(MvcContrib.FluentHtml.IViewModelContainer{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Generate an HTML span element and set its inner text from the ViewModel based on the expression provided.
            </summary>
            <typeparam name="T">The type of the ViewModel.</typeparam>
            <param name="view">The view.</param>
            <param name="expression">Expression indicating the ViewModel member associated with the element.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.ViewModelContainerExtensions.FormLiteral``1(MvcContrib.FluentHtml.IViewModelContainer{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Generate an HTML span element and hidden input element.  Set the inner text of the span element and the value 
            of the hidden input element from the ViewModel based on the expression provided.
            </summary>
            <typeparam name="T">The type of the ViewModel.</typeparam>
            <param name="view">The view.</param>
            <param name="expression">Expression indicating the ViewModel member associated with the element.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.ViewModelContainerExtensions.RadioButton``1(MvcContrib.FluentHtml.IViewModelContainer{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Generate an HTML input element of type 'radio'.
            </summary>
            <typeparam name="T">The type of the ViewModel.</typeparam>
            <param name="view">The view.</param>
            <param name="expression">Expression indicating the ViewModel member associated with the element.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.ViewModelContainerExtensions.RadioSet``1(MvcContrib.FluentHtml.IViewModelContainer{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Generate a set of HTML input elements of type 'radio' -- each wrapped inside a label.  The whole thing is wrapped in an HTML 
            div element.  The values of the input elements and he label text are taken from the options specified.
            </summary>
            <typeparam name="T">The type of the ViewModel.</typeparam>
            <param name="view">The view.</param>
            <param name="expression">Expression indicating the ViewModel member associated with the element.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.ViewModelContainerExtensions.ValidationMessage``1(MvcContrib.FluentHtml.IViewModelContainer{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            If ModelState contains an error for the specified view model member, generate an HTML span element with the 
            ModelState error message is the specified message is null.   If no class is specified the class attribute 
            of the span element will be 'field-validation-error'.
            </summary>
            <typeparam name="T">The type of the ViewModel.</typeparam>
            <param name="view">The view.</param>
            <param name="expression">Expression indicating the ViewModel member associated with the element.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.ViewModelContainerExtensions.ValidationMessage``1(MvcContrib.FluentHtml.IViewModelContainer{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            If ModelState contains an error for the specified view model member, generate an HTML span element with the 
            specified message as inner text, or with the ModelState error message if the specified message is null.  If no
            class is specified the class attribute of the span element will be 'field-validation-error'.
            </summary>
            <typeparam name="T">The type of the ViewModel.</typeparam>
            <param name="view">The view.</param>
            <param name="expression">Expression indicating the ViewModel member associated with the element.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.ViewModelContainerExtensions.Index``1(MvcContrib.FluentHtml.IViewModelContainer{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Generate an HTML input element of type 'hidden,' set it's name from the expression with '.Index' appended.
            </summary>
            <typeparam name="T">The type of the ViewModel.</typeparam>
            <param name="view">The view.</param>
            <param name="expression">Expression indicating the ViewModel member to use to derive the 'name' attribute.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.ViewModelContainerExtensions.Index``1(MvcContrib.FluentHtml.IViewModelContainer{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Generate an HTML input element of type 'hidden,' set it's name from the expression with '.Index' appended
            and set its value from the ViewModel from the valueExpression provided.
            </summary>
            <typeparam name="T">The type of the ViewModel.</typeparam>
            <param name="view">The view.</param>
            <param name="expression">Expression indicating the ViewModel member to use to derive the 'name' attribute.</param>
            <param name="valueExpression">Expression indicating the ViewModel member to use to get the value of the element.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.ViewModelContainerExtensions.NameFor``1(MvcContrib.FluentHtml.IViewModelContainer{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Returns a name to match the value for the HTML name attribute form elements using the same expression. 
            </summary>
            <typeparam name="T">The type of the ViewModel.</typeparam>
            <param name="view">The view.</param>
            <param name="expression">Expression indicating the ViewModel member.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.ViewModelContainerExtensions.IdFor``1(MvcContrib.FluentHtml.IViewModelContainer{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Returns a name to match the value for the HTML id attribute form elements using the same expression. 
            </summary>
            <typeparam name="T">The type of the ViewModel.</typeparam>
            <param name="view">The view.</param>
            <param name="expression">Expression indicating the ViewModel member.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.ViewModelContainerExtensions.SubmitButton``1(MvcContrib.FluentHtml.IViewModelContainer{``0},System.String)">
            <summary>
            Generate an HTML input element of type 'submit.'
            </summary>
            <param name="view">The view.</param>
            <param name="text">Value of the 'value' and 'name' attributes.  Also used to derive the 'id' attribute.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.ViewModelContainerExtensions.TypeStamp``1(MvcContrib.FluentHtml.IViewModelContainer{``0})">
            <summary>
            Generate a hidden field that contains a type stamp of the model
            </summary>
            <typeparam name="T">Model</typeparam>
            <param name="view">extended view</param>
            <returns>Hidden text field containing type information</returns>
        </member>
        <member name="M:MvcContrib.FluentHtml.ViewModelContainerExtensions.RenderPartial``2(MvcContrib.FluentHtml.IViewModelContainer{``0},System.String,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Web.Mvc.ViewDataDictionary)">
            <summary>
            Renders a partial
            </summary>
            <typeparam name="T">The type of the ViewModel.</typeparam>
            <typeparam name="TPartialViewModel">The type of model of the partial.</typeparam>
            <param name="view">The view.</param>
            <param name="partialViewName">The name of the partial to render.</param>
            <param name="modelExpression">Expression of the model for the partial.</param>
            <param name="viewData">View data for the partial. (If the view data has a Model, it will be replaced by the model as specified in the expression parameter, if it is not null.)</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.ViewModelContainerExtensions.RenderPartial``2(MvcContrib.FluentHtml.IViewModelContainer{``0},System.String,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Renders a partial
            </summary>
            <typeparam name="T">The type of the ViewModel.</typeparam>
            <typeparam name="TPartialViewModel">The type of model of the partial.</typeparam>
            <param name="view">The view.</param>
            <param name="partialViewName">The name of the partial to render.</param>
            <param name="modelExpression">Expression of the model for the partial.</param>
        </member>
        <member name="M:MvcContrib.FluentHtml.ViewModelContainerExtensions.RenderPartial``2(MvcContrib.FluentHtml.IViewModelContainer{``0},System.String,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{System.String,System.Object}[])">
            <summary>
            Renders a partial
            </summary>
            <typeparam name="T">The type of the ViewModel.</typeparam>
            <typeparam name="TPartialViewModel">The type of model of the partial.</typeparam>
            <param name="view">The view.</param>
            <param name="partialViewName">The name of the partial to render.</param>
            <param name="modelExpression">Expression of the model for the partial.</param>
            <param name="viewDataItems">A list of funcs, each epxressing a weakly typed view data item for the partial.  For example: index => i</param>
        </member>
    </members>
</doc>
