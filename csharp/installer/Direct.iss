 
; Copyright (c) 2010, Direct Project
; All rights reserved.
;
; Authors:
;    Joseph Shook    JoeShook@Gmail.com
;   
; 
;Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
;
;Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
;Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
;Neither the name of The Direct Project (directproject.org) nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 


; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#include "InnoScripts\IISUtils.iss"
#include "InnoScripts\VcRuntimeInstalled.iss"
#include "InnoScripts\WindowsServicesUtils.iss"
#include "InnoScripts\GetCommandLineParams.iss"

#ifndef Configuration
# define Configuration "Debug"
#endif

#define Instructions = "http://wiki.directproject.org/Enterprise+Installation+Instructions"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
ArchitecturesInstallIn64BitMode=x64 ia64
AppId={{995D337A-5620-4537-9704-4B19EC628A39}
AppName=Direct Project .NET Gateway
AppVerName=Direct Project .NET Gateway 2.0.0.0
AppPublisher=The Direct Project (nhindirect.org)
AppPublisherURL=http://nhindirect.org
AppSupportURL=http://nhindirect.org
AppUpdatesURL=http://nhindirect.org
DefaultDirName={pf}\Direct Project .NET Gateway
DefaultGroupName=Direct Project .NET Gateway
AllowNoIcons=yes
OutputDir=.
OutputBaseFilename=Direct-2.0.0.0-NET45
Compression=lzma
SolidCompression=yes
VersionInfoVersion=2.0.0.0
SetupLogging=yes
PrivilegesRequired=admin

WizardImageFile=Direct.bmp
WizardSmallImageFile=DirectSmall.bmp
WizardImageStretch=Yes



[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Components]
Name: dnsresponder; Description: DNS Responder; Types: dns;
Name: dnswebservice; Description: DNS Web service; Types: config;
Name: configwebservice; Description: Config Web services; Types: config;
Name: configui; Description: UI Web Admin; Types: config;
Name: directgateway; Description: Gateway to SMTP; Types: gateway;
Name: monitorserver; Description: Monitor Server; types: monitor
Name: developergateway; Description: Developer gateway configuration to SMTP; Types: development; 
Name: database; Description: DirectConfig database; Types: database;

     
[Types]
Name: gateway; Description: Gateway               
Name: dns; Description: DNS Responder; 
Name: config; Description: Config services
Name: monitor; Description: Monitor Server
Name: database; Description: Database
Name: custom; Description: Custom Install; Flags: iscustom;
Name: development; Description: Developer Install (Single machine and development gateway version)

[Dirs]
Name: "{app}\Log"

[Files]
;run from command line
;example:
;"C:\Program Files (x86)\inno setup 5\iscc.exe"  .\Direct.iss /DConfiguration=Release
Source: "..\bin\{#Configuration}\*.dll"; DestDir: "{app}"; Flags: ignoreversion;  Components: dnsresponder monitorserver dnswebservice configwebservice configui directgateway developergateway;
Source: "..\bin\{#Configuration}\*.pdb"; DestDir: "{app}"; Flags: ignoreversion; Check: IsDebug; Components: dnsresponder monitorserver dnswebservice configwebservice configui directgateway developergateway;

Source: "..\bin\{#Configuration}\Win32\smtpEventHandler.dll"; DestDir: "{app}"; Flags: ignoreversion; Check: IsX86;  Components: dnsresponder dnswebservice configwebservice configui directgateway developergateway; 
Source: "..\bin\{#Configuration}\x64\smtpEventHandler.dll"; DestDir: "{app}"; Flags: ignoreversion; Check: IsX64 or IsIA64; Components: dnsresponder dnswebservice configwebservice configui directgateway developergateway;                            
Source: "..\bin\{#Configuration}\*.config"; DestDir: "{app}"; Excludes: "*.vshost.*,*.dll.config,DirectDnsResponderSvc.exe.config"; Flags: onlyifdoesntexist; Components: dnsresponder monitorserver dnswebservice configwebservice configui directgateway developergateway;
Source: "..\bin\{#Configuration}\*.exe"; DestDir: "{app}"; Excludes: "*.vshost.*"; Flags: ignoreversion; Components: dnsresponder monitorserver dnswebservice configwebservice configui directgateway developergateway;
Source: "..\bin\{#Configuration}\Certificates\*"; DestDir: "{app}\Certificates"; Flags: ignoreversion recursesubdirs;   Components: developergateway; 
Source: "ConfigConsoleSettings.xml"; DestDir: "{app}"; Flags: onlyifdoesntexist;
Source: "jobs.xml"; DestDir: "{app}"; Flags: onlyifdoesntexist; Components: monitorserver;
Source: "..\bin\{#Configuration}\DirectDnsResponderSvc.exe.config"; DestDir: "{app}"; Flags: onlyifdoesntexist; Components: dnswebservice developergateway;
           
Source: "..\config\service\*.svc"; DestDir: "{app}\ConfigService"; Flags: ignoreversion; Components: configwebservice developergateway; 
Source: "..\config\service\*.aspx"; DestDir: "{app}\ConfigService"; Flags: ignoreversion; Components: configwebservice developergateway; 
Source: "..\config\service\*.config"; DestDir: "{app}\ConfigService"; Flags: onlyifdoesntexist; Components: configwebservice developergateway; 
Source: "..\config\service\bin\*.dll"; DestDir: "{app}\ConfigService\bin"; Flags: ignoreversion recursesubdirs; Components: configwebservice developergateway; 

Source: "..\dnsresponder.service\*.svc"; DestDir: "{app}\DnsService"; Flags: ignoreversion; Components: dnswebservice developergateway; 
Source: "..\dnsresponder.service\*.aspx"; DestDir: "{app}\DnsService"; Flags: ignoreversion; Components: dnswebservice developergateway; 
Source: "..\dnsresponder.service\*.config"; DestDir: "{app}\DnsService"; Flags: onlyifdoesntexist; Components: dnswebservice developergateway; 
Source: "..\dnsresponder.service\bin\*.dll"; DestDir: "{app}\DnsService\bin"; Flags: ignoreversion recursesubdirs; Components: dnswebservice developergateway; 

Source: "..\installer\configui\*"; DestDir: "{app}\ConfigUI"; Flags: ignoreversion recursesubdirs; Components: configui developergateway;
Source: "..\installer\configui\config\dev.client.config"; DestDir: "{app}\ConfigUI\Config";  DestName: "client.config";  Flags: onlyifdoesntexist; Components: configui and not developergateway

Source: "..\gateway\install\*.vbs"; DestDir: "{app}"; Flags: ignoreversion; Components: directgateway developergateway;
Source: "..\gateway\install\*.bat"; DestDir: "{app}"; Excludes: "backup.bat,copybins.bat"; Flags: ignoreversion; Components: directgateway developergateway;
Source: "SmtpAgentConfig.xml"; DestDir: {app}; Flags: onlyifdoesntexist; Components: directgateway developergateway;


Source: "..\gateway\devInstall\DevAgentWithServiceConfig.xml"; DestDir: "{app}"; DestName: "DevAgentConfig.xml"; Flags: ignoreversion; Components: developergateway;            
Source: "..\gateway\devInstall\setupdomains.txt"; DestDir: "{app}"; Flags: ignoreversion; Components: developergateway;
Source: "..\gateway\devInstall\simple.eml"; DestDir: "{app}\Samples"; Flags: ignoreversion; Components: developergateway;

Source: "..\external\microsoft\vcredist\vcredist_x86.exe"; DestDir: "{app}\Libraries"; DestName: "vcredist.exe"; Flags: ignoreversion recursesubdirs; Check: IsX86; Components: directgateway developergateway;
Source: "..\external\microsoft\vcredist\vcredist_x64.exe"; DestDir: "{app}\Libraries"; DestName: "vcredist.exe"; Flags: ignoreversion recursesubdirs; Check: IsX64 or IsIA64; Components: directgateway developergateway;

Source: "createadmin.bat"; DestDir: "{app}";  Flags: ignoreversion;
Source: "createdatabase.bat"; DestDir: "{app}";  Flags: ignoreversion;
Source: "createeventlogsource.bat"; DestDir: "{app}";  Flags: ignoreversion;
Source: "InstallDnsResponder.bat"; DestDir: "{app}";  Flags: ignoreversion; Components: dnsresponder;
Source: "InstallMonitorServer.bat"; DestDir: "{app}";  Flags: ignoreversion; Components: monitorserver;
Source: "installgateway.bat"; DestDir: "{app}";  Flags: ignoreversion; Components: directgateway;
Source: "UninstallDnsResponder.bat"; DestDir: "{app}";  Flags: ignoreversion;  Components: dnsresponder;
Source: "UninstallMonitorServer.bat"; DestDir: "{app}";  Flags: ignoreversion;  Components: monitorserver

Source: "uninstallGateway.bat"; DestDir: "{app}";  Flags: ignoreversion;  Components: directgateway;

Source: "install-dev.bat"; DestDir: "{app}";  Flags: ignoreversion;  Components: developergateway;
Source: "uninstall.bat"; DestDir: "{app}";  Flags: ignoreversion;  Components: developergateway;


Source: "*.ps1"; DestDir: "{app}"; Flags: ignoreversion;
Source: "event-sources.txt"; DestDir: "{app}"; Flags: ignoreversion;
Source: "..\config\store\Schema.sql"; DestDir: "{app}\SQL"; Flags: ignoreversion; Components: database developergateway; 
Source: "createuser.sql"; DestDir: "{app}\SQL"; Flags: ignoreversion; Components: database developergateway; 
Source: "createReadOnlyUser.sql"; DestDir: "{app}\SQL"; Flags: ignoreversion; Components: database developergateway; 

Source: "toolutil\install.tools\bin\{#Configuration}\Health.Direct.Install.Tools.dll"; DestDir: "{app}\InstallTools"; Flags: ignoreversion;  

                                 
[UninstallDelete]
Type: files; Name: "{app}\direct.ini"
Type: files; Name: "{app}\Health.Direct.SmtpAgent.tlb"
Type: files; Name: "{app}\Log\InstallationLogFile.log"
Type: files; Name: "{app}\Log\installdnsresponder.log"
Type: files; Name: "{app}\Log\InstallMonitorServer.log"
Type: files; Name: "{app}\Log\installgateway.log"
Type: files; Name: "{app}\Log\createeventlogsource.log"
Type: files; Name: "{app}\InstallTools\Health.Direct.Install.Tools.tlb"

[Icons]
Name: "{group}\Admin Console"; Filename: "{app}\AdminConsole.exe"; WorkingDir: "{app}";  Components: configui developergateway;
Name: "{group}\Agent Console (DNS)"; Filename: "{app}\AgentConsole.exe"; WorkingDir: "{app}";  Components: dnsresponder developergateway;
Name: "{group}\Config Console"; Filename: "{app}\ConfigConsole.exe"; WorkingDir: "{app}";   Components: directgateway developergateway;
Name: "{group}\Config Web UI"; Filename: "http://localhost/ConfigUI/"; Components: configui developergateway;
Name: "{group}\Test Database"; Filename: "http://localhost/ConfigService/TestService.aspx"; Components: configwebservice developergateway;
Name: "{group}\{cm:UninstallProgram,Direct Gateway}"; Filename: "{uninstallexe}";


[Run]
Filename: {app}\Libraries\vcredist.exe; Description: "Microsoft Visual C++ 2008 Redistributable Package"; Flags: postinstall runascurrentuser unchecked; Components: directgateway; 
Filename: {app}\Libraries\vcredist.exe; Description: "Microsoft Visual C++ 2008 Redistributable Package"; Flags: postinstall runascurrentuser unchecked; Components: developergateway;
Filename: {app}\createdatabase.bat; Parameters: ".\sqlexpress DirectConfig ""{app}\SQL\Schema.sql"" ""{app}\SQL\createuser.sql"""; Description: Install Database; Flags: runascurrentuser postinstall; Components: developergateway and not database;
Filename: {app}\createdatabase.bat; Parameters: ".\sqlexpress DirectConfig ""{app}\SQL\Schema.sql"" ""{app}\SQL\createuser.sql"" ""{app}\SQL\createReadOnlyuser.sql"""; Description: Install Database; Flags: runascurrentuser; Components: database and not developergateway ;
Filename: {app}\createeventlogsource.bat; Parameters: " >> ""{app}\Log\createeventlogsource.log"" 2>&1"; Description:Setup event log; Flags: runascurrentuser; Components: (developergateway or dnsresponder or dnswebservice or configwebservice) and not developergateway;
Filename: {app}\install-dev.bat; Parameters: """{app}"""; Description: "Install Gateway (DEVELOPMENT VERSION)"; WorkingDir: "{app}"; Flags: postinstall runascurrentuser unchecked; Components: developergateway;
Filename: {app}\installdnsresponder.bat; Parameters: """{app}"" >> ""{app}\Log\installdnsresponder.log"" 2>&1"; Description: Install DNS Responder; Flags: runascurrentuser ; Components: dnsresponder and not developergateway;
Filename: {app}\InstallMonitorServer.bat; Parameters: """{app}"" >> ""{app}\Log\InstallMonitorServer.log"" 2>&1"; Description: Install Monitor Server; Flags: runascurrentuser ; Components: monitorserver and not developergateway;
Filename: {dotnet4032}\RegAsm.exe; Parameters: Health.Direct.Install.Tools.dll /codebase; WorkingDir:{app}\InstallTools; StatusMsg: Installing installer tools; Description: Register tool com visible; Flags: runascurrentuser; Components: not developergateway
Filename: {dotnet4064}\RegAsm.exe; Parameters: Health.Direct.Install.Tools.dll /codebase; WorkingDir:{app}\InstallTools; StatusMsg: Installing installer tools; Description: Register tool com visible; Flags: runascurrentuser; Components: not developergateway
Filename: {app}\installgateway.bat; Parameters:  """{app}"" >> ""{app}\Log\installgateway.log"" 2>&1";  Description: Install Gateway; Flags: runascurrentuser ; Components: directgateway and not developergateway;
Filename: {app}\createadmin.bat; Description:Create Admin.  (Database must exist); Flags: runascurrentuser postinstall unchecked; Components: not developergateway; 


[UninstallRun]
Filename: {app}\uninstall.bat; Flags: runascurrentuser; RunOnceId: 'RemoveDeveloperGateway';   Components: developergateway;
Filename: {app}\uninstallDnsResponder.bat; RunOnceId: 'RemoveDnsResponder';  Components: dnsresponder and not developergateway;
Filename: {app}\UninstallMonitorServer.bat; RunOnceId: 'RemoveMonitorServer';  Components: monitorserver and not developergateway;
Filename: {app}\uninstallGateway.bat; RunOnceId: 'RemoveGateway'; Components: directgateway and not developergateway;
Filename: {dotnet4064}\RegAsm; RunOnceId: 'RemoveTools64'; Parameters: Health.Direct.Install.Tools.dll /unregister; WorkingDir:{app}\InstallTools; Flags: runascurrentuser; Components: developergateway;
Filename: {dotnet4032}\RegAsm.exe; RunOnceId: 'RemoveTools32'; Parameters: Health.Direct.Install.Tools.dll /unregister; WorkingDir:{app}\InstallTools; Flags: runascurrentuser; Components: developergateway;


[INI]
Filename: {app}\direct.ini; section: InstallSettings; key: "DnsWebService_Vdir"; string: DnsService; Components: dnswebservice
Filename: {app}\direct.ini; section: InstallSettings; key: "ConfigWebService_Vdir"; string: ConfigService; Components: configwebservice
Filename: {app}\direct.ini; section: InstallSettings; key: ConfigUiWebApp_Vdir; string: ConfigUI; Components: configui



[Code]



var
  //Log file maintenance
  OkToCopyLog : Boolean;
  toolsRegistered : Boolean; //Flag to indicate tools have been registered in the temp folder.
  
  //Global dns variable
  StartDnsServicePostProcessing : Boolean;
  StartDirectMonitorWinSrv : Boolean;
  strDnsServiceNameToCheck : String;
  strDirectMonitorWinSrv : String;

   


function IsX64: Boolean;
begin
  Result := Is64BitInstallMode and (ProcessorArchitecture = paX64);
end;

function IsIA64: Boolean;
begin
  Result := Is64BitInstallMode and (ProcessorArchitecture = paIA64);
end;

function IsX86: Boolean;
begin
  Result := (ProcessorArchitecture = paX86);
end;

function IsDebug: Boolean;
begin
	Result := ('{#Configuration}' = 'Debug');
end;

//included script to test for VC redistributable
function IsVCRT: Boolean;                                                                                        
begin
  Result := VCRT_IsInstalled (VC2008_ANY_x64) = 5;
end;




procedure DnsServiceStop();
  var        
    status: Boolean;       
begin
  strDnsServiceNameToCheck := 'DirectDnsResponderSvc';

  if IsServiceRunning(strDnsServiceNameToCheck) then begin        
    status := StopService(strDnsServiceNameToCheck);
    StartDnsServicePostProcessing := true;
    Sleep(2000);
    if not status then
      MsgBox('Stop the Direct Dns Service manually to continue the installation', mbError, mb_Ok);     
  end;
end;


procedure MonitorServiceStop();
  var
    status: Boolean;
begin
  strDirectMonitorWinSrv := 'DirectMonitorWinSrv';

  if IsServiceRunning(strDirectMonitorWinSrv) then begin
    status := StopService(strDirectMonitorWinSrv);
    StartDirectMonitorWinSrv := true;
    Sleep(2000);
    if not status then
      MsgBox('Stop the Direct Monitor Service manually to continue the installation', mbError, mb_Ok);
  end;
end;





function InitializeSetup(): Boolean; 
begin
  DnsServiceStop();
  MonitorServiceStop();
  Result := true;      
end;


procedure DeinitializeSetup();
begin
    if StartDnsServicePostProcessing then begin
      if not IsServiceRunning(strDnsServiceNameToCheck) then begin
        StartService(strDnsServiceNameToCheck);
      end;
    end;
    
    if StartDirectMonitorWinSrv then begin
      if not IsServiceRunning(strDirectMonitorWinSrv) then begin
        StartService(strDirectMonitorWinSrv);
      end;
    end;

    //log files processing
    if OkToCopyLog then
    FileCopy (ExpandConstant ('{log}'), ExpandConstant ('{app}\Log\InstallationLogFile.log'), FALSE);
    RestartReplace (ExpandConstant ('{log}'), '');   // remove the temp log file during the next system restart.


end;


function PrepareToInstall(var NeedsRestart: Boolean): String;
var
  ResultCode : Integer; 
begin
  Exec('IISRESET','', '', SW_SHOW, ewWaitUntilTerminated, ResultCode );    
  Result := '';   
end;



function TestConnection(endpoint : String): Boolean;
var
  tools: Variant; 
  success: Boolean;
begin
  success := false;
  try                              
    tools := CreateOleObject('Direct.Installer.EndPointTools');
  except
    RaiseException('Cannot find Direct.Installer.EndPointTools.'#13#13'(Error ''' + GetExceptionMessage + ''' occurred)');
  end;
    try
      success := tools.TestWcfSoapConnection(endpoint);
    except
      RaiseException('Failed end point test for endpoint: ' + endpoint +  #13#13'(Error ''' + GetExceptionMessage + ''' occurred)');
    end;
    Result := success;
end;



procedure RunTestConnect(wizPage: TWizardPage; labelName, textboxName : String );
var
  myTextBox : TCustomEdit;
  myLabel : TNewStaticText;  
begin   
  myTextBox := TCustomEdit(wizPage.FindComponent(textboxName));
  myLabel :=  TNewStaticText(wizPage.FindComponent(labelName));       

  if(TestConnection(myTextBox.Text)) then
  begin    
    myLabel.Font.Color := clGreen;
  end else
  begin
    myLabel.Font.Color := clRed;
  end;
  myLabel.Update;     
end;



procedure RunTestServiceAspx(wizPage: TWizardPage; labelName, textboxName : String );
var
  tools : Variant;
  myTextBox : TCustomEdit;
  myLabel : TNewStaticText;
  success : Boolean;  
begin   
  myTextBox := TCustomEdit(wizPage.FindComponent(textboxName));
  myLabel :=  TNewStaticText(wizPage.FindComponent(labelName));       


  success := false;
  try                              
    tools := CreateOleObject('Direct.Installer.EndPointTools');
  except
    RaiseException('Cannot find Direct.Installer.EndPointTools.'#13#13'(Error ''' + GetExceptionMessage + ''' occurred)');
  end;

  try
    success := tools.TestConnection(myTextBox.Text, 'Database is accessible!');
  except
    RaiseException('Failed end point test for endpoint: ' + myTextBox.Text +  #13#13'(Error ''' + GetExceptionMessage + ''' occurred)');
  end;
    
  if(success) then
  begin    
    myLabel.Font.Color := clGreen;
  end else
  begin
    myLabel.Font.Color := clRed;
  end;
  myLabel.Update;     
end;


procedure CheckDnsResponderServiceOnClick(Sender: TObject);
var            
  EndPointsButton : TNewButton;
  DnsResponderPage : TWizardPage;
  buttonCaption : String;   
begin
  EndPointsButton := TNewButton(Sender);
  DnsResponderPage := TWizardPage(EndPointsButton.Owner);   
  
  buttonCaption := EndPointsButton.Caption;
  EndPointsButton.Caption := 'Checking...';
  //ShellExecAsOriginalUser('open', DnsServiceTestTextBox.Text, '', '', SW_SHOWNORMAL, ewNoWait, ErrorCode); 
  try      
    RunTestServiceAspx(DnsResponderPage, 'DnsServiceTestLabel', 'DnsServiceTestTextBox');      
    RunTestConnect(DnsResponderPage, 'DnsServiceLabel', 'DnsServiceUrlText');          
  except         
    RaiseException(GetExceptionMessage);
  finally
    EndPointsButton.Caption := buttonCaption;
    EndPointsButton.Update;  
  end;
end;




procedure CheckDatabaseConnOnClick(Sender: TObject);
var
  tools: Variant;
  Button: TButton;
  DbConnStrTextBox: TNewEdit;
  DatabaseConnPage: TWizardPage;  
  StatusLabel : TNewStaticText;
  success : Boolean;
  message : String;
begin
  Button := TButton(Sender);
  DatabaseConnPage := TWizardPage(Button.Owner);
  DbConnStrTextBox := TNewEdit(DatabaseConnPage.FindComponent('DbConnStrTextBox'));   
  StatusLabel := TNewStaticText(DatabaseConnPage.FindComponent('StatusLabel'));
  StatusLabel.Font.Color := clBlack;
  StatusLabel.Caption := 'Checking Db Connection...';
  StatusLabel.Update;
  try
    tools := CreateOleObject('Direct.Installer.SqlDbTools');
  except
    RaiseException('Cannot find Direct.Installer.SqlDbTools.'#13#13'(Error ''' + GetExceptionMessage + ''' occurred)');
  end;
    success := tools.TestConnection(DbConnStrTextBox.Text, message);     
    if(success) then
    begin
      StatusLabel.Font.Color := clGreen;
      StatusLabel.Caption := 'Success';      
      StatusLabel.Update;
    end
    else
    begin
      StatusLabel.Font.Color := clRed;
      StatusLabel.Caption := 'Failed: ' + message;           
      StatusLabel.Update;
    end;         
end;


procedure SetDnsResponderUrl(url: String);
var
  tools: Variant;
begin
  try                              
    tools := CreateOleObject('Direct.Installer.XPathTools');
  except
    RaiseException('Cannot find Direct.Installer.XPathTools.'#13#13'(Error ''' + GetExceptionMessage + ''' occurred)');
  end;
    tools.XmlFilePath := ExpandConstant('{app}') + '\DirectDnsResponderSvc.exe.config' ;
    tools.SetSingleAttribute('/configuration/ServiceSettingsGroup/RecordRetrievalServiceSettings/@Url', url);
end;




procedure SetDatabaseConnSting(page: TWizardPage; connStr: String);
var
  tools : Variant;
begin
  try
    tools := CreateOleObject('Direct.Installer.XPathTools');
  except
    RaiseException('Cannot find Direct.Installer.XPathTools.'#13#13'(Error ''' + GetExceptionMessage + ''' occurred)');
  end;
    if (page.Name = 'ConfigService') then
    begin
      tools.XmlFilePath := ExpandConstant('{app}') + '\ConfigService\Web.Config'; //Set Admin UI
      tools.SetSingleAttribute('configuration/connectionStrings/add[@name="configStore"]/@connectionString', connStr);
      tools.XmlFilePath := ExpandConstant('{app}') + '\AdminConsole.exe.config';  //Set Admin Console
      tools.SetSingleAttribute('configuration/connectionStrings/add[@name="configStore"]/@connectionString', connStr);
    end;

    if (page.Name = 'DnsService') then
    begin
      tools.XmlFilePath := ExpandConstant('{app}') + '\DnsService\Web.Config';
      tools.SetSingleAttribute('configuration/connectionStrings/add[@name="configStore"]/@connectionString', connStr);
    end;

    if (page.Name = 'MdnMonitorService') then
    begin
      tools.XmlFilePath := ExpandConstant('{app}') + '\DirectMonitorWinSrv.exe.config';
      tools.SetSingleAttribute('configuration/connectionStrings/add[@name="configStore"]/@connectionString', connStr);
    end;

end;
       


function SetDnsResponderUrlOnClick(Sender: TWizardPage): Boolean;
var
  DnsServiceUrlText : TNewEdit;
begin         
    DnsServiceUrlText := TNewEdit(Sender.FindComponent('DnsServiceUrlText'));
    SetDnsResponderUrl(DnsServiceUrlText.Text);
    Result := True;
end;


//Save connection string
//Determine which config files to save it to.
function SetDatabaseConnUrlOnClick(Sender: TWizardPage): Boolean;
var
  DbConnStrTextBox : TNewEdit;
begin  
  DbConnStrTextBox := TNewEdit(Sender.FindComponent('DbConnStrTextBox')); 
  SetDatabaseConnSting(Sender, DbConnStrTextBox.Text);
  Result := True; 
end;






function GetConfigSetting(configFile, xpath : String): String;
var
  xpathTools: Variant;    
begin
  try                              
    xpathTools := CreateOleObject('Direct.Installer.XPathTools');
  except
    RaiseException('Cannot find Direct.Installer.XPathTools.'#13#13'(Error ''' + GetExceptionMessage + ''' occurred)');
  end;
    xpathTools.XmlFilePath := configFile ;
    Result := xpathTools.SelectSingleAttribute(xpath);
end;




procedure WriteConfigItem(wizardPage : TWizardPage; configFile, xpath, objectName : String);
var
  xpathTools: Variant;     
  textBox: TCustomEdit; 
  labelText: TNewStaticText;
  value : String;
  existingValue : String;
begin
  try                              
    xpathTools := CreateOleObject('Direct.Installer.XPathTools');
  except
    RaiseException('Cannot find Direct.Installer.XPathTools.'#13#13'(Error ''' + GetExceptionMessage + ''' occurred)');
  end;
    textBox := TCustomEdit(wizardPage.FindComponent(objectName));   
    //labelText := TNewStaticText(wizardPage.FindComponent(objectName));   
    if not (textBox = nil) then
    begin
      value := Trim(textBox.text);
    end
    else
    begin
      value := labelText.Caption;
    end;

    if ( Length(value) = 0) then Exit;

    xpathTools.XmlFilePath := configFile;
    
    existingValue := xpathTools.SelectSingleAttribute(xpath);
    
    if ( VarIsNull(existingValue)) then
    begin
      xpathTools.CreateFragment(xpath);
    end;
    
    xpathTools.SetSingleAttribute(xpath, value);
    
end;








procedure WriteOrDeleteConfigItem(wizardPage : TWizardPage; configFile, nodexPath, xpath, objectName : String);
var
  xpathTools: Variant;     
  textBox: TCustomEdit; 
  labelText: TNewStaticText;
  value : String;
  existingValue : String;
begin
  try                              
    xpathTools := CreateOleObject('Direct.Installer.XPathTools');
  except
    RaiseException('Cannot find Direct.Installer.XPathTools.'#13#13'(Error ''' + GetExceptionMessage + ''' occurred)');
  end;
    textBox := TCustomEdit(wizardPage.FindComponent(objectName));   
     
    if not (textBox = nil) then
    begin
      value := Trim(textBox.text);
    end;
    
    if ( Length(value) > 0) then
    begin
      // Write data
      WriteConfigItem(wizardPage, configFile, xpath, objectName);
    end
    else
    begin
      // Remove node
      xpathTools.XmlFilePath := configFile;          
      existingValue := xpathTools.SelectSingleAttribute(nodexPath);
    
      if ( Length(existingValue) > 0) then
      begin
        xpathTools.DeleteFragment(nodexPath);
      end;      
    end; 
end;






procedure WriteXmlFragment(configFile, xpath, fragement : String);
var
  xpathTools: Variant;
begin
  try                              
    xpathTools := CreateOleObject('Direct.Installer.XPathTools');
  except
    RaiseException('Cannot find Direct.Installer.XPathTools.'#13#13'(Error ''' + GetExceptionMessage + ''' occurred)');
  end;
    xpathTools.XmlFilePath := configFile;     
    if ( Length(xpathTools.SelectSingleAttribute(xpath)) > 0 ) then
      begin
        xpathTools.ReplaceFragment(xpath, fragement); 
      end;
end;



procedure InsertXmlFragmentBefore(configFile, fragement, xPathBefore : String);
var
  xpathTools: Variant;
begin
  try                              
    xpathTools := CreateOleObject('Direct.Installer.XPathTools');
  except
    RaiseException('Cannot find Direct.Installer.XPathTools.'#13#13'(Error ''' + GetExceptionMessage + ''' occurred)');
  end;
    xpathTools.XmlFilePath := configFile;     
    xpathTools.CreateFragmentBefore(fragement, xPathBefore);     
end;

//Configure Config Admin client endpoint urls.
function SetConfigAdminEndpointsOnClick(Sender: TWizardPage): Boolean;
var
  configFile  : String;
begin
  configFile := ExpandConstant('{app}') + '\ConfigUI\Config\client.config';      
  
  WriteConfigItem(Sender, configFile, 'client/endpoint[@bindingConfiguration="BasicHttpBinding_ICertificateStore"]/@address', 'CertificatesUrlText'); 
  WriteConfigItem(Sender, configFile, 'client/endpoint[@bindingConfiguration="BasicHttpBinding_IAnchorStore"]/@address', 'AnchorsUrlText'); 
  WriteConfigItem(Sender, configFile, 'client/endpoint[@bindingConfiguration="BasicHttpBinding_IAddressManager"]/@address', 'AddressesUrlText'); 
  WriteConfigItem(Sender, configFile, 'client/endpoint[@bindingConfiguration="BasicHttpBinding_IDomainManager"]/@address', 'DomainsUrlText'); 
  WriteConfigItem(Sender, configFile, 'client/endpoint[@bindingConfiguration="BasicHttpBinding_IDnsRecordManager"]/@address', 'DnsRecordsUrlText'); 
  WriteConfigItem(Sender, configFile, 'client/endpoint[@bindingConfiguration="BasicHttpBinding_IAuthManager"]/@address', 'AuthenticationUrlText'); 

  Result := True; 
end;

   
   
function SetGatewayConfigPageOneOnClick(Sender: TWizardPage): Boolean;
var                
  configFile  : String;
  StaticDomainRadio, DynamicDomainRadio : TNewRadioButton;
begin
  
  StaticDomainRadio := TNewRadioButton(Sender.FindComponent('StaticDomainRadio'));
  DynamicDomainRadio := TNewRadioButton(Sender.FindComponent('DynamicDomainRadio'));


  // Setting SmtpAgentConfig for Gateway
  configFile := ExpandConstant('{app}') + '\SmtpAgentConfig.xml';
  
  if ( StaticDomainRadio.Checked = True )  then
  begin
    WriteConfigItem(Sender, configFile, '/SmtpAgentConfig/Domain', 'DomainText');
    WriteXmlFragment(configFile, '/SmtpAgentConfig/Domains', '');
  end;

  if ( DynamicDomainRadio.Checked = True ) then
  begin
    WriteConfigItem(Sender, configFile, '/SmtpAgentConfig/Domains/ServiceResolver/AgentName', 'AgentNameText');
    WriteConfigItem(Sender, configFile, '/SmtpAgentConfig/Domains/ServiceResolver/ClientSettings/Url', 'DomainManagerText');
    WriteXmlFragment(configFile, '/SmtpAgentConfig/Domain', '');
  end;

  
  
  Result := True;
end;





function SetGatewayConfigPageTwoOnClick(Sender: TWizardPage): Boolean;
var                
  configFile  : String;
  anchorPlugin : String;
  BundleText: TNewEdit;
begin
  
  // Setting SmtpAgentConfig for Gateway
  configFile := ExpandConstant('{app}') + '\SmtpAgentConfig.xml';
  
  WriteConfigItem(Sender, configFile, '/SmtpAgentConfig/DomainManager/Url', 'DomainManagerText');
  WriteConfigItem(Sender, configFile, '/SmtpAgentConfig/AddressManager/Url', 'AddressManagerText');
  WriteConfigItem(Sender, configFile, '/SmtpAgentConfig/PrivateCerts/ServiceResolver/ClientSettings/Url', 'PrivateCertsText');                           
  WriteConfigItem(Sender, configFile, '/SmtpAgentConfig/PublicCerts/DnsResolver/ServerIP', 'DnsResolverIpText');
  WriteOrDeleteConfigItem(Sender, configFile, '/SmtpAgentConfig/MdnMonitor', '/SmtpAgentConfig/MdnMonitor/Url', 'MdnMonitorText'); 
  
  BundleText := TNewEdit(Sender.FindComponent('BundleText'));

  anchorPlugin := GetConfigSetting(configFile, '/SmtpAgentConfig/Anchors/PluginResolver')
  if ( Length(anchorPlugin) > 0 ) and ( Length(Trim(BundleText.Text)) > 0) then
  begin
    WriteConfigItem(Sender, configFile, '/SmtpAgentConfig/Anchors/PluginResolver/Definition/Settings/ServiceResolver/ClientSettings/Url', 'AnchorsText'); 
    WriteConfigItem(Sender, configFile, '/SmtpAgentConfig/Anchors/PluginResolver/Definition/Settings/BundleResolver/ClientSettings/Url', 'BundleText');
  end
  else
  begin  // Anchor Plugin did not exist        
    if ( Length(Trim(BundleText.Text)) > 0 ) then
    begin
        //create anchor plugin
        WriteXmlFragment(configFile, '/SmtpAgentConfig/Anchors', '<Anchors><PluginResolver><!-- NEW Resolver that COMBINES Anchors from multiple sources into a single list--><Definition><TypeName>Health.Direct.ResolverPlugins.MultiSourceAnchorResolver, Health.Direct.ResolverPlugins</TypeName><Settings><!-- New Bundle Resolver --><BundleResolver><ClientSettings><Url>http://localhost/ConfigService/CertificateService.svc/Bundles</Url></ClientSettings><CacheSettings><Cache>true</Cache><NegativeCache>true</NegativeCache><!-- Set cache to longer duration in production --><CacheTTLSeconds>60</CacheTTLSeconds></CacheSettings><MaxRetries>1</MaxRetries><Timeout>30000</Timeout><!-- In milliseconds --><VerifySSL>true</VerifySSL></BundleResolver><!-- Standard Resolver that pulls from Anchor store --><ServiceResolver><ClientSettings><Url>http://localhost/ConfigService/CertificateService.svc/Anchors</Url></ClientSettings><CacheSettings><Cache>true</Cache><NegativeCache>true</NegativeCache><CacheTTLSeconds>60</CacheTTLSeconds></CacheSettings></ServiceResolver></Settings></Definition></PluginResolver></Anchors>'); 

        WriteConfigItem(Sender, configFile, '/SmtpAgentConfig/Anchors/PluginResolver/Definition/Settings/ServiceResolver/ClientSettings/Url', 'AnchorsText'); 
        WriteConfigItem(Sender, configFile, '/SmtpAgentConfig/Anchors/PluginResolver/Definition/Settings/BundleResolver/ClientSettings/Url', 'BundleText');
    end
    else //just write the anchor manager url
    begin
      WriteXmlFragment(configFile, '/SmtpAgentConfig/Anchors', '<Anchors><ServiceResolver><ClientSettings><Url>http://localhost/ConfigService/CertificateService.svc/Anchors</Url></ClientSettings></ServiceResolver></Anchors>'); 
      WriteConfigItem(Sender, configFile, '/SmtpAgentConfig/Anchors/ServiceResolver/ClientSettings/Url', 'AnchorsText'); 
    end;
  end;

  Result := True;
end;

function SetConfigAdminPageThreeEndpointsOnClick(Sender: TWizardPage): Boolean;
var                
  configFile  : String;
begin
  
  configFile := ExpandConstant('{app}') + '\SmtpAgentConfig.xml';
  
  WriteConfigItem(Sender, configFile, '/SmtpAgentConfig/InternalMessage/PickupFolder', 'PickupText');
  WriteConfigItem(Sender, configFile, '/SmtpAgentConfig/RawMessage/CopyFolder', 'RawMessageText');
  WriteConfigItem(Sender, configFile, '/SmtpAgentConfig/BadMessage/CopyFolder', 'BadMessageText');
  WriteConfigItem(Sender, configFile, '/SmtpAgentConfig/ProcessIncoming/CopyFolder', 'IncomingMessageText');
  WriteConfigItem(Sender, configFile, '/SmtpAgentConfig/ProcessOutgoing/CopyFolder', 'OutgoingMessageText');
 
  Result := True;
end;



function SetConfigConsolePageOneEndpointsOnClick(Sender: TwizardPage): Boolean;
var
  configFile : String;
begin
  // Setting ConfigConsoleSettings.xml
  configFile := ExpandConstant('{app}') + '\ConfigConsoleSettings.xml';

  WriteConfigItem(Sender, configFile, '/ConsoleSettings/DomainManager/Url', 'DomainManagerText');
  WriteConfigItem(Sender, configFile, '/ConsoleSettings/AddressManager/Url', 'AddressManagerText');
  WriteConfigItem(Sender, configFile, '/ConsoleSettings/CertificateManager/Url', 'PrivateCertsText');
  WriteConfigItem(Sender, configFile, '/ConsoleSettings/AnchorManager/Url', 'AnchorsText');
  WriteConfigItem(Sender, configFile, '/ConsoleSettings/DnsRecordManager/Url', 'DnsRecordManagerText');
  WriteOrDeleteConfigItem(Sender, configFile, '/ConsoleSettings/MdnMonitor', '/ConsoleSettings/MdnMonitor/Url', 'MdnMonitorText'); 
  WriteOrDeleteConfigItem(Sender, configFile, '/ConsoleSettings/BundleManager', '/ConsoleSettings/BundleManager/Url', 'BundleText'); 

  Result := True;

end;



function SetConfigConsolePageTwoEndpointsOnClick(Sender: TwizardPage): Boolean;
var
  configFile : String;
begin
  // Setting ConfigConsoleSettings.xml
  configFile := ExpandConstant('{app}') + '\ConfigConsoleSettings.xml';
         
  WriteOrDeleteConfigItem(Sender, configFile, '/ConsoleSettings/PropertyManager', '/ConsoleSettings/PropertyManager/Url', 'PropertyText');
  WriteOrDeleteConfigItem(Sender, configFile, '/ConsoleSettings/BlobManager', '/ConsoleSettings/BlobManager/Url', 'BlobText');
  
  Result := True;

end;





        
       
procedure TestEndPointPageOneOnClick (Sender: TObject);
var                   
  EndPointsButton: TNewButton;
  buttonCaption : String;
  GatewayAdminPage : TWizardPage;
begin         
  EndPointsButton := TNewButton(Sender);
  GatewayAdminPage := TWizardPage(EndPointsButton.Owner);
  buttonCaption := EndPointsButton.Caption;
  EndPointsButton.Caption := 'Checking...';
  try      
    RunTestConnect(GatewayAdminPage, 'DomainManagerLabel', 'DomainManagerText');     
  except         
    RaiseException(GetExceptionMessage);
  finally
    EndPointsButton.Caption := buttonCaption;
    EndPointsButton.Update;  
  end;   
end;

       
procedure TestEndPointPageTwoOnClick (Sender: TObject);
var                   
  EndPointsButton: TNewButton;
  buttonCaption : String;
  GatewayAdminPage : TWizardPage;
begin         
  EndPointsButton := TNewButton(Sender);
  GatewayAdminPage := TWizardPage(EndPointsButton.Owner);
  buttonCaption := EndPointsButton.Caption;
  EndPointsButton.Caption := 'Checking...';
  try      
    RunTestConnect(GatewayAdminPage, 'DomainManagerLabel', 'DomainManagerText');
    RunTestConnect(GatewayAdminPage, 'AddressManagerLabel', 'AddressManagerText');
    RunTestConnect(GatewayAdminPage, 'PrivateCertsLabel', 'PrivateCertsText');
    RunTestConnect(GatewayAdminPage, 'AnchorsLabel', 'AnchorsText');
    RunTestConnect(GatewayAdminPage, 'MdnMonitorLabel', 'MdnMonitorText');
    RunTestConnect(GatewayAdminPage, 'BundleLabel', 'BundleText');
  except         
    RaiseException(GetExceptionMessage);
  finally
    EndPointsButton.Caption := buttonCaption;
    EndPointsButton.Update;  
  end;   
end;


procedure ConfigConsolePageOneOnClick (Sender: TObject);
var
  EndPointsButton: TNewButton;
  buttonCaption : String;
  GatewayAdminPage : TWizardPage;
begin
  EndPointsButton := TNewButton(Sender);
  GatewayAdminPage := TWizardPage(EndPointsButton.Owner);
  buttonCaption := EndPointsButton.Caption;
  EndPointsButton.Caption := 'Checking...';
  try
    RunTestConnect(GatewayAdminPage, 'DomainManagerLabel', 'DomainManagerText');
    RunTestConnect(GatewayAdminPage, 'AddressManagerLabel', 'AddressManagerText');
    RunTestConnect(GatewayAdminPage, 'DnsRecordManagerLabel', 'DnsRecordManagerText');
    RunTestConnect(GatewayAdminPage, 'PrivateCertsLabel', 'PrivateCertsText');
    RunTestConnect(GatewayAdminPage, 'AnchorsLabel', 'AnchorsText');
    RunTestConnect(GatewayAdminPage, 'MdnMonitorLabel', 'MdnMonitorText');
    RunTestConnect(GatewayAdminpage, 'BundleLabel', 'BundleText');
  except
    RaiseException(GetExceptionMessage);
  finally
    EndPointsButton.Caption := buttonCaption;
    EndPointsButton.Update;
  end;
end;


procedure ConfigConsolePageTwoOnClick (Sender: TObject);
var
  EndPointsButton: TNewButton;
  buttonCaption : String;
  GatewayAdminPage : TWizardPage;
begin
  EndPointsButton := TNewButton(Sender);
  GatewayAdminPage := TWizardPage(EndPointsButton.Owner);
  buttonCaption := EndPointsButton.Caption;
  EndPointsButton.Caption := 'Checking...';
  try    
    RunTestConnect(GatewayAdminPage, 'PropertyLabel', 'PropertyText');
    RunTestConnect(GatewayAdminPage, 'BlobLabel', 'BlobText');
  except
    RaiseException(GetExceptionMessage);
  finally
    EndPointsButton.Caption := buttonCaption;
    EndPointsButton.Update;
  end;
end;


procedure ConfigAdminHostNameOnClick(Sender: TObject);
var
  buttonCaption : String;  
  HostNameTextBox : TNewEdit;
  ConfigAdminPage : TWizardPage;
  tools : Variant;
  EndPointsButton : TNewButton;
begin
  try                              
    tools := CreateOleObject('Direct.Installer.UrlTools');
  except
    RaiseException('Cannot find Direct.Installer.UrlTools.'#13#13'(Error ''' + GetExceptionMessage + ''' occurred)');
  end;  
  
  EndPointsButton := TNewButton(Sender);
  ConfigAdminPage := TWizardPage(EndPointsButton.Owner);
  HostNameTextBox := TNewEdit(ConfigAdminPage.FindComponent('HostNameTextBox'));
  
  buttonCaption := EndPointsButton.Caption;
  EndPointsButton.Caption := 'Checking...';
   
  try      
    RunTestConnect(ConfigAdminPage, 'CertificatesLabel', 'CertificatesUrlText');
    RunTestConnect(ConfigAdminPage, 'AnchorsLabel', 'AnchorsUrlText');
    RunTestConnect(ConfigAdminPage, 'AddressesLabel', 'AddressesUrlText');
    RunTestConnect(ConfigAdminPage, 'DomainsLabel', 'DomainsUrlText');
    RunTestConnect(ConfigAdminPage, 'DnsRecordsLabel', 'DnsRecordsUrlText');
    RunTestConnect(ConfigAdminPage, 'AuthenticationLabel', 'AuthenticationUrlText'); 
  except         
    RaiseException(GetExceptionMessage);
  finally
    EndPointsButton.Caption := buttonCaption;
    EndPointsButton.Update;  
  end;
end;




procedure DnsResponderPageOnActivate(Sender: TWizardPage);
var
  tools : Variant;
  DnsServiceUrlText : TNewEdit;
  DnsServiceTestTextBox : TNewEdit;
  configFile : String;
begin

  configFile := ExpandConstant('{app}') + '\DirectDnsResponderSvc.exe.config' ;
  
  //Set DnsService from config file.
  DnsServiceUrlText := TNewEdit(Sender.FindComponent('DnsServiceUrlText'));
  DnsServiceUrlText.Text :=   GetConfigSetting(configFile, '/configuration/ServiceSettingsGroup/RecordRetrievalServiceSettings/@Url');
  
  //Set TestService.aspx by rebuilding Url 
  try                              
    tools := CreateOleObject('Direct.Installer.UrlTools');
  except
    RaiseException('Cannot find Direct.Installer.UrlTools.'#13#13'(Error ''' + GetExceptionMessage + ''' occurred)');
  end;  
  DnsServiceTestTextBox := TNewEdit(Sender.FindComponent('DnsServiceTestTextBox')); 
  DnsServiceTestTextBox.Text := tools.UpdateUrlPathAndQuery(DnsServiceUrlText.Text, '/DnsService/TestService.aspx').FullUrl;
  
end;



function GetDbConnStr(page : TWizardPage): String;
var
  xpathTools: Variant; 
  dbConnStr: String;
begin
  try                              
    xpathTools := CreateOleObject('Direct.Installer.XPathTools');
  except
    RaiseException('Cannot find Direct.Installer.XPathTools.'#13#13'(Error ''' + GetExceptionMessage + ''' occurred)');
  end;
    if (page.Name = 'ConfigService') then
    begin
      xpathTools.XmlFilePath := ExpandConstant('{app}') + '\ConfigService\Web.Config';
    end;
    
    if (page.Name = 'DnsService') then
    begin
      xpathTools.XmlFilePath := ExpandConstant('{app}') + '\DnsService\Web.Config';
    end;

    if (page.Name = 'MdnMonitorService') then
    begin
      xpathTools.XmlFilePath := ExpandConstant('{app}') + '\DirectMonitorWinSrv.exe.config';
    end;
    
    dbConnStr := xpathTools.SelectSingleAttribute('configuration/connectionStrings/add[@name="configStore"]/@connectionString');
    Result := dbConnStr;
end;



procedure DatabaseConnPageOnActivate(Sender: TWizardPage);
var
  DbConnStrTextBox : TNewEdit;
begin
  DbConnStrTextBox := TNewEdit(Sender.FindComponent('DbConnStrTextBox')); 
  DbConnStrTextBox.Text := GetDbConnStr(Sender);
end;





procedure UpdateConfigFileName();
var
  xpathTools: Variant;
begin
  try                              
    xpathTools := CreateOleObject('Direct.Installer.XPathTools');
  except
    RaiseException('Cannot find Direct.Installer.XPathTools.'#13#13'(Error ''' + GetExceptionMessage + ''' occurred)');
  end;
    xpathTools.XmlFilePath := ExpandConstant('{app}') + '\ConfigUI\Web.Config' ;
    xpathTools.SetSingleAttribute('configuration/system.serviceModel/client/@configSource', 'Config\Client.config');
end;


procedure ConfigAdminPageOnActivate(Sender: TWizardPage);
var               
  CertificatesUrlText, AnchorsUrlText, AddressesUrlText, DomainsUrlText, DnsRecordsUrlText, AuthenticationUrlText : TCustomEdit;
  configFile : String;
begin

  configFile :=  ExpandConstant('{app}') + '\ConfigUI\Config\client.config';

  UpdateConfigFileName();  //Point Web.Config to the correct client config file.
  
  CertificatesUrlText := TCustomEdit(Sender.FindComponent('CertificatesUrlText')); 
  CertificatesUrlText.Text := GetConfigSetting(configFile, '/client/endpoint[@bindingConfiguration="BasicHttpBinding_ICertificateStore"]/@address');

  AnchorsUrlText := TCustomEdit(Sender.FindComponent('AnchorsUrlText')); 
  AnchorsUrlText.Text := GetConfigSetting(configFile, '/client/endpoint[@bindingConfiguration="BasicHttpBinding_IAnchorStore"]/@address');

  AddressesUrlText := TCustomEdit(Sender.FindComponent('AddressesUrlText')); 
  AddressesUrlText.Text := GetConfigSetting(configFile, '/client/endpoint[@bindingConfiguration="BasicHttpBinding_IAddressManager"]/@address');

  DomainsUrlText := TCustomEdit(Sender.FindComponent('DomainsUrlText'));
  DomainsUrlText.Text := GetConfigSetting(configFile, '/client/endpoint[@bindingConfiguration="BasicHttpBinding_IDomainManager"]/@address');

  DnsRecordsUrlText := TCustomEdit(Sender.FindComponent('DnsRecordsUrlText')); 
  DnsRecordsUrlText.Text := GetConfigSetting(configFile, '/client/endpoint[@bindingConfiguration="BasicHttpBinding_IDnsRecordManager"]/@address');

  AuthenticationUrlText := TCustomEdit(Sender.FindComponent('AuthenticationUrlText')); 
  AuthenticationUrlText.Text := GetConfigSetting(configFile, '/client/endpoint[@bindingConfiguration="BasicHttpBinding_IAuthManager"]/@address');

end;






          
procedure GatewayAdminPageOneOnActivate(Sender: TWizardPage);
var
  StaticDomainRadio, DynamicDomainRadio : TNewRadioButton;
  StaticPanel, DynamicPanel : TPanel;
  configFile : String;
  DomainName, SmtpAgentName, DomainManager : String;
  StaticDomainFragment, DynamicDomainFragment : String;
begin

  configFile :=  ExpandConstant('{app}') + '\SmtpAgentConfig.xml';
  StaticDomainRadio := TNewRadioButton(Sender.FindComponent('StaticDomainRadio'));
  DynamicDomainRadio := TNewRadioButton(Sender.FindComponent('DynamicDomainRadio'));
  StaticPanel := TPanel(Sender.FindComponent('StaticPanel'));
  DynamicPanel := TPanel(Sender.FindComponent('DynamicPanel'));

  DomainName := GetConfigSetting(configFile, '/SmtpAgentConfig/Domain');
  SmtpAgentName := GetConfigSetting(configFile, '/SmtpAgentConfig/Domains/ServiceResolver/AgentName');
  DomainManager := GetConfigSetting(configFile, '/SmtpAgentConfig/Domains/ServiceResolver/ClientSettings/Url');

  if ( Length(DomainName) > 0 ) then
    begin
      StaticDomainRadio.Checked := True;
    end
    else 
    begin
      DynamicDomainRadio.Checked := True; 
    end;
end; 






procedure DomainOptionClick (Sender: TObject);
var       
  DomainText, AgentNameText, DomainManagerText: TNewEdit;            
  RadioButton: TNewRadioButton;
  StaticPanel, DynamicPanel : TPanel;
  configFile : String;
  DomainName, SmtpAgentName, DomainManager : String;
  GatewayAdminPage : TWizardPage;
  StaticDomainFragment, DynamicDomainFragment : String;
begin         
  RadioButton := TNewRadioButton(Sender);
  GatewayAdminPage := TWizardPage(RadioButton.Owner);     
  
  configFile := ExpandConstant('{app}') + '\SmtpAgentConfig.xml';
  DomainName := GetConfigSetting(configFile, '/SmtpAgentConfig/Domain');
  SmtpAgentName := GetConfigSetting(configFile, '/SmtpAgentConfig/Domains/ServiceResolver/AgentName');
  DomainManager := GetConfigSetting(configFile, '/SmtpAgentConfig/Domains/ServiceResolver/ClientSettings/Url');

  StaticPanel := TPanel(GatewayAdminPage.FindComponent('StaticPanel'));
  DynamicPanel := TPanel(GatewayAdminPage.FindComponent('DynamicPanel'));

  DynamicDomainFragment := '<Domains><ServiceResolver><AgentName>SmtpAgent1</AgentName><ClientSettings><Url>http://localhost/ConfigService/DomainManagerService.svc/Domains</Url></ClientSettings><CacheSettings><Cache>true</Cache><CacheTTLSeconds>20</CacheTTLSeconds></CacheSettings></ServiceResolver></Domains>';
  StaticDomainFragment := '<Domain>DomainName</Domain>';
    
  if ( RadioButton.Checked = True ) and ( RadioButton.Name = 'StaticDomainRadio' ) then
  begin
    StaticPanel.Show();
    DynamicPanel.Hide();
    DomainText := TNewEdit(GatewayAdminPage.FindComponent('DomainText'));
    if ( Length(DomainText.Text) = 0 ) then
      begin
        DomainText.Text := DomainName;  
      end;
    if ( Length(DomainName) = 0 ) then
    begin
        InsertXmlFragmentBefore(configFile, StaticDomainFragment, '/SmtpAgentConfig/DomainManager');
        GatewayAdminPageOneOnActivate(GatewayAdminPage);  
    end;         
  end;

  if ( RadioButton.Checked = True ) and ( RadioButton.Name = 'DynamicDomainRadio' ) then
  begin
    DynamicPanel.Show();
    StaticPanel.Hide();
    AgentNameText := TNewEdit(GatewayAdminPage.FindComponent('AgentNameText'));
    if ( Length(AgentNameText.Text) = 0 ) then
      begin
        AgentNameText.Text := SmtpAgentName;
      end;
    DomainManagerText := TNewEdit(GatewayAdminPage.FindComponent('DomainManagerText'));
    if ( Length(DomainManagerText.Text) = 0 ) then
      begin            
        DomainManagerText.Text := DomainManager;
      end;

    if ( Length(SmtpAgentName) = 0 ) then
    begin
      //Insert  DynamicDomainFragment
      InsertXmlFragmentBefore(configFile, DynamicDomainFragment, '/SmtpAgentConfig/DomainManager');
      GatewayAdminPageOneOnActivate(GatewayAdminPage);  
    end;
  end;
  
end;






procedure GatewayAdminPageTwoOnActivate(Sender: TWizardPage);
var
  DomainManagerText, AddressManagerText, PrivateCertsText, AnchorsText, DnsResolverIpText, MdnMonitorText, BundleText: TNewEdit;
  configFile : String;
begin

  configFile :=  ExpandConstant('{app}') + '\SmtpAgentConfig.xml';
  
  DomainManagerText := TNewEdit(Sender.FindComponent('DomainManagerText'));
  DomainManagerText.Text := GetConfigSetting(configFile, '/SmtpAgentConfig/DomainManager/Url');

  AddressManagerText := TNewEdit(Sender.FindComponent('AddressManagerText'));
  AddressManagerText.Text := GetConfigSetting(configFile, '/SmtpAgentConfig/AddressManager/Url');
  
  PrivateCertsText := TNewEdit(Sender.FindComponent('PrivateCertsText'));
  PrivateCertsText.Text := GetConfigSetting(configFile, '/SmtpAgentConfig/PrivateCerts/ServiceResolver/ClientSettings/Url');
  
  AnchorsText := TNewEdit(Sender.FindComponent('AnchorsText'));
  AnchorsText.Text := GetConfigSetting(configFile, '/SmtpAgentConfig/Anchors/ServiceResolver/ClientSettings/Url | /SmtpAgentConfig/Anchors/PluginResolver/Definition/Settings/ServiceResolver/ClientSettings/Url');
  
  DnsResolverIpText := TNewEdit(Sender.FindComponent('DnsResolverIpText'));
  DnsResolverIpText.Text := GetConfigSetting(configFile, '/SmtpAgentConfig/PublicCerts/DnsResolver/ServerIP');
  
  MdnMonitorText := TNewEdit(Sender.FindComponent('MdnMonitorText'));
  MdnMonitorText.Text := GetConfigSetting(configFile, '/SmtpAgentConfig/MdnMonitor/Url');

  BundleText := TNewEdit(Sender.FindComponent('BundleText'));
  BundleText.Text := GetConfigSetting(configFile, '/SmtpAgentConfig/Anchors/PluginResolver/Definition/Settings/BundleResolver/ClientSettings/Url');

end; 



procedure GatewayAdminPageThreeOnActivate(Sender: TWizardPage);
var
  PickupText, RawMessageText, BadMessageText, IncomingMessageText, OutgoingMessageText : TNewMemo;
  configFile : String;
begin
  configFile :=  ExpandConstant('{app}') + '\SmtpAgentConfig.xml';
  
  PickupText := TNewMemo(Sender.FindComponent('PickupText'));
  PickupText.Text := GetConfigSetting(configFile, '/SmtpAgentConfig/InternalMessage/PickupFolder');

  RawMessageText := TNewMemo(Sender.FindComponent('RawMessageText'));
  RawMessageText.Text := GetConfigSetting(configFile, '/SmtpAgentConfig/RawMessage/CopyFolder');
  
  BadMessageText := TNewMemo(Sender.FindComponent('BadMessageText'));
  BadMessageText.Text := GetConfigSetting(configFile, '/SmtpAgentConfig/BadMessage/CopyFolder');
  
  IncomingMessageText := TNewMemo(Sender.FindComponent('IncomingMessageText'));
  IncomingMessageText.Text := GetConfigSetting(configFile, '/SmtpAgentConfig/ProcessIncoming/CopyFolder');
  
  OutgoingMessageText := TNewMemo(Sender.FindComponent('OutgoingMessageText'));
  OutgoingMessageText.Text := GetConfigSetting(configFile, '/SmtpAgentConfig/ProcessOutgoing/CopyFolder');

end;



procedure ConfigConsolePageOneOnActivate(Sender: TWizardPage);
var
  DomainManagerText, AddressManagerText, DnsRecordManagerText, PrivateCertsText, AnchorsText, PropertyText, BlobText, MdnMonitorText, BundleText: TNewEdit;
  configFile : String;
  bundleString : String;
begin
  configFile :=  ExpandConstant('{app}') + '\ConfigConsoleSettings.xml';

  DomainManagerText := TNewEdit(Sender.FindComponent('DomainManagerText'));
  DomainManagerText.Text := GetConfigSetting(configFile, '/ConsoleSettings/DomainManager/Url');

  AddressManagerText := TNewEdit(Sender.FindComponent('AddressManagerText'));
  AddressManagerText.Text := GetConfigSetting(configFile, '/ConsoleSettings/AddressManager/Url');

  DnsRecordManagerText := TNewEdit(Sender.FindComponent('DnsRecordManagerText'));
  DnsRecordManagerText.Text := GetConfigSetting(configFile, '/ConsoleSettings/DnsRecordManager/Url');

  PrivateCertsText := TNewEdit(Sender.FindComponent('PrivateCertsText'));
  PrivateCertsText.Text := GetConfigSetting(configFile, '/ConsoleSettings/CertificateManager/Url');

  AnchorsText := TNewEdit(Sender.FindComponent('AnchorsText'));
  AnchorsText.Text := GetConfigSetting(configFile, '/ConsoleSettings/AnchorManager/Url');
                          
  MdnMonitorText := TNewEdit(Sender.FindComponent('MdnMonitorText'));
  MdnMonitorText.Text := GetConfigSetting(configFile, '/ConsoleSettings/MdnMonitor/Url');

  BundleText := TNewEdit(Sender.FindComponent('BundleText'));
  bundleString  := GetConfigSetting(configFile, '/ConsoleSettings/BundleManager/Url');
 
  if (length(bundleString) = 0) then
  begin
    bundleString := 'http://localhost/ConfigService/CertificateService.svc/Bundles';
  end;
  BundleText.Text := bundleString;

end;



procedure ConfigConsolePageTwoOnActivate(Sender: TWizardPage);
var
  DomainManagerText, AddressManagerText, DnsRecordManagerText, PrivateCertsText, AnchorsText, PropertyText, BlobText, MdnMonitorText, BundleText: TNewEdit;
  configFile : String;
begin
  configFile :=  ExpandConstant('{app}') + '\ConfigConsoleSettings.xml';

  PropertyText := TNewEdit(Sender.FindComponent('PropertyText'));
  PropertyText.Text := GetConfigSetting(configFile, '/ConsoleSettings/PropertyManager/Url');

  BlobText := TNewEdit(Sender.FindComponent('BlobText'));
  BlobText.Text := GetConfigSetting(configFile, '/ConsoleSettings/BlobManager/Url');

end;




function DnsResponderPage_ShouldSkip(Page: TwizardPage): Boolean;
begin
  Result := (pos( 'dnsresponder', WizardSelectedComponents( false)) = 0) ;  
end;




//Skip this page if not configuring a service that relies on the database.
function DatabaseConnPage_ShouldSkip(Page: TwizardPage): Boolean;
begin
  if(Page.Name = 'ConfigService') then
  begin
    Result := (pos( 'configwebservice', WizardSelectedComponents( false)) = 0)
                or (pos( 'developergateway', WizardSelectedComponents( false)) > 0)
  end;
  
  if(Page.Name = 'DnsService') then
  begin
    Result := (pos( 'dnswebservice', WizardSelectedComponents( false)) = 0)
                or (pos( 'developergateway', WizardSelectedComponents( false)) > 0)
  end;
  
  if(Page.Name = 'MdnMonitorService') then
  begin
    Result := (pos( 'monitorserver', WizardSelectedComponents( false)) = 0)
                or (pos( 'developergateway', WizardSelectedComponents( false)) > 0)
  end;
end;







//Skip this page is not configuring the Config Admin UI
function ConfigAdminPage_ShouldSkip(Page: TwizardPage): Boolean;
begin
  Result := (pos( 'configui', WizardSelectedComponents( false)) = 0)                  
                or (pos( 'developergateway', WizardSelectedComponents( false)) > 0)
end;




//Skip this page is not configuring the Config Admin UI
function GatewayAdminPage_ShouldSkip(Page: TwizardPage): Boolean;
begin
  Result := (pos( 'directgateway', WizardSelectedComponents( false)) = 0)                  
                or (pos( 'developergateway', WizardSelectedComponents( false)) > 0)
end;


//Skip this page is not configuring the Config Admin UI
function ConfigConsolePage_ShouldSkip(Page: TwizardPage): Boolean;
begin
  Result := (pos( 'directgateway', WizardSelectedComponents( false)) = 0)
                or (pos( 'developergateway', WizardSelectedComponents( false)) > 0)
end;



//only call this once.  Notice we register the Health.Direct.Install.Tools.dll via the temp folder once then remove.
//later it is registered when the files have been placed in their deployment location.
function MsSmtpServiceExists(Host: String; Port: Integer): Boolean;
var
    ResultCode: Integer;
    SmtpExists: Boolean;
    SmtpTools: Variant;       
begin
  
  if(CommandlineParamExists('SkipSmtpCheck')) then
  begin
    Result := true;
    exit;
  end;
  if(not toolsRegistered) then
  begin
    ExtractTemporaryFile('Health.Direct.Install.Tools.dll');     
    Exec(ExpandConstant('{dotnet4032}\RegAsm.exe'),'Health.Direct.Install.Tools.dll /codebase', ExpandConstant('{tmp}'), SW_SHOW, ewWaitUntilTerminated, ResultCode );
    Exec(ExpandConstant('{dotnet4064}\RegAsm.exe'),'Health.Direct.Install.Tools.dll /codebase', ExpandConstant('{tmp}'), SW_SHOW, ewWaitUntilTerminated, ResultCode );
    toolsRegistered := true;
  end;

  try                           
    SmtpTools := CreateOleObject('Direct.Installer.SmtpTools');
  except
    RaiseException('Cannot find Direct.Installer.SmtpTools.'#13#13'(Error ''' + GetExceptionMessage + ''' occurred)');
  end;
    try
      Log('Checking Smtp connection with host:port of ' + Host + ':' + IntToStr(Port)); 
      SmtpExists := SmtpTools.TestConnection(Host, Port);
    except
      Log('Error: ' + GetExceptionMessage);       
    end
    Result := SmtpExists;
end;

function NextButtonClick(CurPageID: Integer): Boolean;
  
 begin
  if(CurPageID = wpSelectComponents) then 
    begin                
      //check for smtp services
      if (pos( 'directgateway', WizardSelectedComponents( false)) > 0)  then
      begin
          if not (MsSmtpServiceExists('LocalHost', 25)) then
          begin
            MsgBox('Failed to find smtp running.' #13#13 + 'Cannot install directgateway.', mbInformation, mb_Ok);
            Result := False;
          end 
          else begin
            Result := True;
          end;
      end
      else begin
        Result := True;
      end;      
  end    
  else begin
    Result := True;
  end;    
end;


procedure DnsHelpButtonOnClick(Sender: TObject);     
begin
  MsgBox('Test connectivity to the Dns Web Service and its database connectivity.'  #13#10 +
    'Set the Dns Web Service endpoint used by the DnsResponder Windows Service.'  #13#10 +
    'The "End Point" labels will be green when they are connecting and red when failing.', mbInformation, mb_Ok);
end;

procedure DatabaseHelpButtonOnClick(Sender: TObject);   
begin
  MsgBox('Set database connection strings on the ConfigService and/or DnsService.'  #13#10 +
    'Use the Test button to test connectivity before clicking next.  Clicking next will persist the connection string.' #13#10 +
    'When connecting across machine boundaries with only TCP/IP protocol enabled it may help to add Network Library=dbmssocn to your connection string.' , mbInformation, mb_Ok);
end;


procedure ConfigAdminHelpButtonOnClick(Sender: TObject);       
begin
  MsgBox('Set the web service client endpoints on the Admin Configuration web application.  '  #13#10 +
    'The "End Point" labels will be green when they are connecting and red when failing.', mbInformation, mb_Ok);
end;

procedure GatewayAdminHelpButtonOnClick(Sender: TObject);
begin
  MsgBox('Part I configures Domains' #13#10 +
    'Part II configures config store endpoints.'  #13#10 +
    'Part III configures message folders and SMTP pickup up folder.' #13#10 +
    'Note: Both sending messges to SMTP server and dropping in the pickup folder are supported for sending messages.' #13#10 +
    'The "End Point" labels will be green when they are connecting and red when failing.', mbInformation, mb_Ok);
end;

procedure ConfigConsolePageHelpButtonOnClick(Sender: TObject);
begin
  MsgBox('Configure endpoints for the Config Console.'  #13#10 +
    'The "End Point" labels will be green when they are connecting and red when failing.', mbInformation, mb_Ok);
end;


procedure URLLabelOnClick(Sender: TObject);
var
  ErrorCode: Integer;
  URLLabel: TNewStaticText;
  begin
  URLLabel := TNewStaticText(Sender);
  ShellExecAsOriginalUser('open', '{#Instructions}', '', '', SW_SHOWNORMAL, ewNoWait, ErrorCode);
end;


function CreateDatabaseConnWizardPage(pageBefore: TWizardPage): TWizardPage;
var
  DatabaseConnPage: TWizardPage;       
  Button, HelpButton: TNewButton;
  DbConnStrTextBox : TNewEdit;
  StatusLabel: TNewStaticText;
begin

  DatabaseConnPage := CreateCustomPage(pageBefore.ID, 'Configure database connection string', '');
    
  HelpButton := TNewButton.Create(DatabaseConnPage);      
  HelpButton.Left := DatabaseConnPage.Surface.Width - ScaleX(20);
  HelpButton.Width := ScaleX(20);
  HelpButton.Height := ScaleY(20);   
  HelpButton.Caption := '?';
  HelpButton.OnClick := @DatabaseHelpButtonOnClick;
  HelpButton.Parent := DatabaseConnPage.Surface;  

  Button := TNewButton.Create(DatabaseConnPage);
  Button.Top := HelpButton.Top + HelpButton.Height + ScaleY(20);
  Button.Height :=  WizardForm.NextButton.Height;
  Button.Width := DatabaseConnPage.SurfaceWidth div 4;
  Button.Caption := 'Test: ';
  Button.OnClick := @CheckDatabaseConnOnClick;
  Button.Parent := DatabaseConnPage.Surface;

  DbConnStrTextBox := TNewEdit.Create(DatabaseConnPage);
  DbConnStrTextBox.Name := 'DbConnStrTextBox';
  DbConnStrTextBox.Top := Button.Top + Button.Height + ScaleY(20);
  DbConnStrTextBox.Width := DatabaseConnPage.SurfaceWidth - ScaleX(8);
  DbConnStrTextBox.Parent := DatabaseConnPage.Surface;
  
  StatusLabel := TNewStaticText.Create(DatabaseConnPage);
  StatusLabel.Name := 'StatusLabel';
  StatusLabel.Caption := '';
  StatusLabel.Top := DatabaseConnPage.SurfaceHeight - ScaleY(16);
  StatusLabel.Left := ScaleX(8);
  StatusLabel.Parent := DatabaseConnPage.Surface;

  DatabaseConnPage.OnActivate := @DatabaseConnPageOnActivate;
  DatabaseConnPage.OnNextButtonClick := @SetDatabaseConnUrlOnClick;
  DatabaseConnPage.OnShouldSkipPage := @DatabaseConnPage_ShouldSkip;

  Result := DatabaseConnPage;
end;





function CreateDnsResponderWizardPage(pageBefore: TWizardPage): TWizardPage;
var
  DnsResponderPage: TWizardPage;
  DnsServiceTestTextBox: TNewEdit;
  Button, HelpButton: TNewButton;
  DnsServiceEndPointLabel, DnsServiceLabel, DnsServiceTestLabel : TNewStaticText;
  DnsServiceUrlText : TNewEdit;
begin

  DnsResponderPage := CreateCustomPage(pageBefore.ID, 'Configure DnsResponder', 'DnsService endpoint stored in DirectDnsResponderSvc.exe.config');
    
  HelpButton := TNewButton.Create(DnsResponderPage);      
  HelpButton.Left := DnsResponderPage.Surface.Width - ScaleX(20);
  HelpButton.Width := ScaleX(20);
  HelpButton.Height := ScaleY(20);   
  HelpButton.Caption := '?';
  HelpButton.OnClick := @DnsHelpButtonOnClick;
  HelpButton.Parent := DnsResponderPage.Surface;  

  Button := TNewButton.Create(DnsResponderPage);
  Button.Height :=  WizardForm.NextButton.Height;
  Button.Width := DnsResponderPage.SurfaceWidth div 4;
  Button.Caption := 'Test: ';
  Button.OnClick := @CheckDnsResponderServiceOnClick;
  Button.Parent := DnsResponderPage.Surface;
  
  DnsServiceEndPointLabel := TNewStaticText.Create(DnsResponderPage);
  DnsServiceEndPointLabel.Top := Button.Top + Button.Height + ScaleY(16); 
  DnsServiceEndPointLabel.Caption := 'DnsService endpoint: ';
  DnsServiceEndPointLabel.Width := Button.Width;
  DnsServiceEndPointLabel.Parent := DnsResponderPage.Surface;

  DnsServiceTestLabel := TNewStaticText.Create(DnsResponderPage);
  DnsServiceTestLabel.Name := 'DnsServiceTestLabel';
  DnsServiceTestLabel.Caption := 'Test DB connectivity: ';
  DnsServiceTestLabel.Top := DnsServiceEndPointLabel.Top + DnsServiceEndPointLabel.Height + ScaleY(16);
  DnsServiceTestLabel.Parent := DnsResponderPage.Surface;
  DnsServiceTestLabel.Width := DnsServiceTestLabel.Width - ScaleX(4);
  
  DnsServiceTestTextBox := TNewEdit.Create(DnsResponderPage);
  DnsServiceTestTextBox.Name := 'DnsServiceTestTextBox';
  DnsServiceTestTextBox.Top := DnsServiceTestLabel.Top;
  DnsServiceTestTextBox.Left :=  DnsServiceTestLabel.Width + ScaleX(4);
  DnsServiceTestTextBox.Width := DnsResponderPage.SurfaceWidth - DnsServiceTestLabel.Width - ScaleX(4);
  DnsServiceTestTextBox.Parent := DnsResponderPage.Surface;  
                                             
  DnsServiceLabel := TNewStaticText.Create(DnsResponderPage);
  DnsServiceLabel.Name := 'DnsServiceLabel';
  DnsServiceLabel.Caption := 'DNS Service';
  DnsServiceLabel.Top := DnsServiceTestLabel.Top + DnsServiceTestLabel.Height + ScaleY(16); 
  DnsServiceLabel.Parent := DnsResponderPage.Surface;

  DnsServiceUrlText := TNewEdit.Create(DnsResponderPage);
  DnsServiceUrlText.Name := 'DnsServiceUrlText';   
  DnsServiceUrlText.Top := DnsServiceLabel.Top;
  DnsServiceUrlText.Left :=  DnsServiceTestTextBox.Left;
  DnsServiceUrlText.Width := DnsServiceTestTextBox.Width;
  DnsServiceUrlText.Parent := DnsResponderPage.Surface;     
  
  DnsResponderPage.OnActivate := @DnsResponderPageOnActivate;
  DnsResponderPage.OnNextButtonClick := @SetDnsResponderUrlOnClick;
  DnsResponderPage.OnShouldSkipPage := @DnsResponderPage_ShouldSkip;
  Result := DnsResponderPage;
end;



function CreateGatewayWizardPageOne(pageBefore: TWizardPage): TWizardPage;
var
  GatewayAdminPageOne: TWizardPage;
  HelpButton, EndPointsButton: TNewButton;
  DomainLabel, SmtpAgentLabel, DomainManagerLabel : TNewStaticText;
  DomainText, AgentNameText, DomainManagerText : TNewEdit;
  StaticDomainRadio, DynamicDomainRadio : TNewRadioButton; 
  StaticPanel, DynamicPanel : TPanel;
begin
    GatewayAdminPageOne := CreateCustomPage(pageBefore.ID, 'Configure Gateway part I', '');
     
    HelpButton := TNewButton.Create(GatewayAdminPageOne);      
    HelpButton.Left := GatewayAdminPageOne.Surface.Width - ScaleX(20);
    HelpButton.Width := ScaleX(20);
    HelpButton.Height := ScaleY(20);   
    HelpButton.Caption := '?';
    HelpButton.OnClick := @GatewayAdminHelpButtonOnClick;
    HelpButton.Parent := GatewayAdminPageOne.Surface;  
    
    //Set Static Domain             
    StaticDomainRadio := TNewRadioButton.Create(GatewayAdminPageOne);
    StaticDomainRadio.Name := 'StaticDomainRadio';
    StaticDomainRadio.Caption :=  'Static Domain Option';
    StaticDomainRadio.Width :=    GatewayAdminPageOne.SurfaceWidth - ScaleX(20) - HelpButton.Width;
    StaticDomainRadio.Parent := GatewayAdminPageOne.Surface;
    StaticDomainRadio.Top := HelpButton.Top;
    StaticDomainRadio.OnClick := @DomainOptionClick;

    StaticPanel := TPanel.Create(GatewayAdminPageOne); 
    StaticPanel.Name := 'StaticPanel';   
    StaticPanel.Parent := GatewayAdminPageOne.Surface;
    StaticPanel.Top :=  StaticDomainRadio.Top + StaticDomainRadio.Height + ScaleY(11);
    StaticPanel.BevelOuter := bvNone;
    //StaticPanel.Align := alBottom;
    StaticPanel.Caption := '';
    StaticPanel.BorderWidth := 2;
    StaticPanel.BorderStyle := bsSingle;
    //StaticPanel.Color := $E5B13A;  
    StaticPanel.Height := 40;
    StaticPanel.Width :=  GatewayAdminPageOne.SurfaceWidth - ScaleX(20);
    StaticPanel.ParentBackground := False;
    
    
    DomainLabel := TNewStaticText.Create(GatewayAdminPageOne);
    DomainLabel.Name := 'DomainLabel';
    DomainLabel.Left :=  ScaleX(8);
    DomainLabel.Top := ScaleY(11);
    DomainLabel.Caption := 'Domain Name: ';
    DomainLabel.Parent := StaticPanel;        
                              
    DomainText := TNewEdit.Create(GatewayAdminPageOne);
    DomainText.Name := 'DomainText';
    DomainText.Left := DomainLabel.Width + ScaleX(8);
    DomainText.Top := ScaleY(11);
    DomainText.Width := GatewayAdminPageOne.SurfaceWidth - ScaleX(20) - HelpButton.Width - DomainLabel.Width;
    DomainText.Text := '';
    DomainText.Parent := StaticPanel;


    //Set Dynamic Domain
    DynamicDomainRadio := TNewRadioButton.Create(GatewayAdminPageOne);
    DynamicDomainRadio.Name := 'DynamicDomainRadio';
    DynamicDomainRadio.Caption :=  'Dynamic Domain Option';
    DynamicDomainRadio.Width :=  DynamicDomainRadio.Width;
    DynamicDomainRadio.Parent := GatewayAdminPageOne.Surface;
    DynamicDomainRadio.Top := StaticPanel.Top + StaticPanel.Height + ScaleY(11);
    DynamicDomainRadio.OnClick := @DomainOptionClick;

    DynamicPanel := TPanel.Create(GatewayAdminPageOne);
    DynamicPanel.Name := 'DynamicPanel';
    DynamicPanel.Parent := GatewayAdminPageOne.Surface;
    DynamicPanel.Top :=  DynamicDomainRadio.Top + DynamicDomainRadio.Height + ScaleY(11);
    DynamicPanel.BevelOuter := bvNone;
    DynamicPanel.Caption := '';
    DynamicPanel.BorderWidth := 2;
    DynamicPanel.BorderStyle := bsSingle;
    //DynamicPanel.Color := $E5B13A;  
    DynamicPanel.Height := 100;
    DynamicPanel.Width := GatewayAdminPageOne.SurfaceWidth - ScaleX(20)
    DynamicPanel.ParentBackground := False;
    

    SmtpAgentLabel := TNewStaticText.Create(GatewayAdminPageOne);
    SmtpAgentLabel.Name := 'SmtpAgentLabel';
    SmtpAgentLabel.Caption := 'Smtp Agent Name: ';
    SmtpAgentLabel.Left :=  ScaleX(8);
    SmtpAgentLabel.Top :=  ScaleY(11);
    SmtpAgentLabel.Parent := DynamicPanel;
    
                              
    AgentNameText := TNewEdit.Create(GatewayAdminPageOne);
    AgentNameText.Name := 'AgentNameText';       
    AgentNameText.Left := SmtpAgentLabel.Width + ScaleX(8);
    AgentNameText.Width := GatewayAdminPageOne.SurfaceWidth - ScaleX(20) - HelpButton.Width - SmtpAgentLabel.Width;
    AgentNameText.Top :=  ScaleY(11);
    AgentNameText.Parent := DynamicPanel;
    AgentNameText.Text := '';

    //Test button
    EndPointsButton := TNewButton.Create(GatewayAdminPageOne);
    EndPointsButton.Top :=  SmtpAgentLabel.Top + SmtpAgentLabel.Height + ScaleY(11);
    EndPointsButton.Left :=  ScaleX(8);
    EndPointsButton.Caption := 'Test End Points:';
    EndPointsButton.Width :=  DynamicPanel.Width div 4;
    EndPointsButton.OnClick := @TestEndPointPageOneOnClick;
    EndPointsButton.Parent := DynamicPanel;


    DomainManagerLabel := TNewStaticText.Create(GatewayAdminPageOne);
    DomainManagerLabel.Name := 'DomainManagerLabel';
    DomainManagerLabel.Left :=  ScaleX(8);
    DomainManagerLabel.Caption := 'Domain Manager: ';
    DomainManagerLabel.Parent := DynamicPanel;
    DomainManagerLabel.Top := EndPointsButton.Top + EndPointsButton.Height + ScaleY(11);
    DomainManagerLabel.Width := SmtpAgentLabel.Width;
                              
    DomainManagerText := TNewEdit.Create(GatewayAdminPageOne);
    DomainManagerText.Name := 'DomainManagerText';       
    DomainManagerText.Left := DomainManagerLabel.Width + ScaleX(8);
    DomainManagerText.Width := GatewayAdminPageOne.SurfaceWidth - ScaleX(20) - HelpButton.Width - SmtpAgentLabel.Width;
    DomainManagerText.Parent := DynamicPanel;
    DomainManagerText.Top := EndPointsButton.Top + EndPointsButton.Height + ScaleY(11);
    DomainManagerText.Text := '';

    GatewayAdminPageOne.OnActivate := @GatewayAdminPageOneOnActivate;
    GatewayAdminPageOne.OnNextButtonClick := @SetGatewayConfigPageOneOnClick;
    GatewayAdminPageOne.OnShouldSkipPage := @GatewayAdminPage_ShouldSkip;

    Result := GatewayAdminPageOne;
end;

function CreateGatewayWizardPageTwo(pageBefore: TWizardPage): TWizardPage;
var
  GatewayAdminPageTwo: TWizardPage;
  HelpButton, EndPointsButton: TNewButton;
  DomainManagerLabel, AddressManagerLabel, PrivateCertsLabel, AnchorsLabel, DnsResolverIpLabel, MdnMonitorLabel, BundleLabel: TNewStaticText;
  DomainManagerText, AddressManagerText, PrivateCertsText, AnchorsText, DnsResolverIpText, MdnMonitorText, BundleText : TNewEdit;
  
begin
    GatewayAdminPageTwo := CreateCustomPage(pageBefore.ID, 'Configure Gateway part II', '');
     
    HelpButton := TNewButton.Create(GatewayAdminPageTwo);      
    HelpButton.Left := GatewayAdminPageTwo.Surface.Width - ScaleX(20);
    HelpButton.Width := ScaleX(20);
    HelpButton.Height := ScaleY(20);   
    HelpButton.Caption := '?';
    HelpButton.OnClick := @GatewayAdminHelpButtonOnClick;
    HelpButton.Parent := GatewayAdminPageTwo.Surface;  
    
    
    //Test button
    EndPointsButton := TNewButton.Create(GatewayAdminPageTwo);
    EndPointsButton.Top :=  HelpButton.Top;
    EndPointsButton.Caption := 'Test End Points:';
    EndPointsButton.Width :=  GatewayAdminPageTwo.SurfaceWidth div 4;
    EndPointsButton.OnClick := @TestEndPointPageTwoOnClick;
    EndPointsButton.Parent := GatewayAdminPageTwo.Surface;

    //Set Privates Certs.  Later it is placed in its page location.  Using its width to base all the texbox left positions.       
    PrivateCertsLabel := TNewStaticText.Create(GatewayAdminPageTwo);
    PrivateCertsLabel.Caption := 'Certificate Resolver: ';
    PrivateCertsLabel.Width := PrivateCertsLabel.Width + ScaleX(4);

    //Set Domain Manager
    DomainManagerLabel := TNewStaticText.Create(GatewayAdminPageTwo);
    DomainManagerLabel.Name := 'DomainManagerLabel';
    DomainManagerLabel.Top :=  EndPointsButton.Top + EndPointsButton.Height + ScaleY(11);
    DomainManagerLabel.Caption := 'Domain Manager: ';
    DomainManagerLabel.Parent := GatewayAdminPageTwo.Surface;
                              
    DomainManagerText := TNewEdit.Create(GatewayAdminPageTwo);
    DomainManagerText.Name := 'DomainManagerText';
    DomainManagerText.Top := DomainManagerLabel.Top;
    DomainManagerText.Left := PrivateCertsLabel.Width + ScaleX(4);
    DomainManagerText.Width := GatewayAdminPageTwo.SurfaceWidth - PrivateCertsLabel.Width - ScaleX(4);
    DomainManagerText.Parent := GatewayAdminPageTwo.Surface;


    //Set Address Manager
    AddressManagerLabel := TNewStaticText.Create(GatewayAdminPageTwo);
    AddressManagerLabel.Name := 'AddressManagerLabel';
    AddressManagerLabel.Top :=  DomainManagerLabel.Top + DomainManagerLabel.Height + ScaleY(11);
    AddressManagerLabel.Caption := 'Address Manager: ';
    AddressManagerLabel.Parent := GatewayAdminPageTwo.Surface;
                              
    AddressManagerText := TNewEdit.Create(GatewayAdminPageTwo);
    AddressManagerText.Name := 'AddressManagerText';
    AddressManagerText.Top := AddressManagerLabel.Top;
    AddressManagerText.Left := DomainManagerText.Left;
    AddressManagerText.Width := DomainManagerText.Width;
    AddressManagerText.Parent := GatewayAdminPageTwo.Surface;

    //Set Privates Certs (Created above)                
    PrivateCertsLabel.Name := 'PrivateCertsLabel';
    PrivateCertsLabel.Top :=  AddressManagerLabel.Top + AddressManagerLabel.Height + ScaleY(11);
    PrivateCertsLabel.Parent := GatewayAdminPageTwo.Surface;
                              
    PrivateCertsText := TNewEdit.Create(GatewayAdminPageTwo);
    PrivateCertsText.Name := 'PrivateCertsText';
    PrivateCertsText.Top := PrivateCertsLabel.Top;
    PrivateCertsText.Left := DomainManagerText.Left;
    PrivateCertsText.Width := DomainManagerText.Width;
    PrivateCertsText.Parent := GatewayAdminPageTwo.Surface;

    //Set Anchors
    AnchorsLabel := TNewStaticText.Create(GatewayAdminPageTwo);
    AnchorsLabel.Name := 'AnchorsLabel';
    AnchorsLabel.Top :=  PrivateCertsLabel.Top + PrivateCertsLabel.Height + ScaleY(11);
    AnchorsLabel.Caption := 'Anchor Resolver: ';
    AnchorsLabel.Parent := GatewayAdminPageTwo.Surface;
                              
    AnchorsText := TNewEdit.Create(GatewayAdminPageTwo);
    AnchorsText.Name := 'AnchorsText';
    AnchorsText.Top := AnchorsLabel.Top;
    AnchorsText.Left := DomainManagerText.Left;
    AnchorsText.Width := DomainManagerText.Width;
    AnchorsText.Parent := GatewayAdminPageTwo.Surface;





    //Set MdnMonitor Manager
    MdnMonitorLabel := TNewStaticText.Create(GatewayAdminPageTwo);
    MdnMonitorLabel.Name := 'MdnMonitorLabel';
    MdnMonitorLabel.Top :=  AnchorsLabel.Top + AnchorsLabel.Height + ScaleY(11);
    MdnMonitorLabel.Caption := 'MDN Monitor: ';
    MdnMonitorLabel.Parent := GatewayAdminPageTwo.Surface;

    MdnMonitorText := TNewEdit.Create(GatewayAdminPageTwo);
    MdnMonitorText.Name := 'MdnMonitorText';
    MdnMonitorText.Top := MdnMonitorLabel.Top;
    MdnMonitorText.Left := DomainManagerText.Left;
    MdnMonitorText.Width := DomainManagerText.Width;
    MdnMonitorText.Parent := GatewayAdminPageTwo.Surface;
    
    
    //Set Trust Bundle Manager
    BundleLabel := TNewStaticText.Create(GatewayAdminPageTwo);
    BundleLabel.Name := 'BundleLabel';
    BundleLabel.Top :=  MdnMonitorLabel.Top + MdnMonitorLabel.Height + ScaleY(11);
    BundleLabel.Caption := 'TrustBundle Manager: ';
    BundleLabel.Parent := GatewayAdminPageTwo.Surface;

    BundleText := TNewEdit.Create(GatewayAdminPageTwo);
    BundleText.Name := 'BundleText';
    BundleText.Top := BundleLabel.Top;
    BundleText.Left := DomainManagerText.Left;
    BundleText.Width := DomainManagerText.Width;
    BundleText.Parent := GatewayAdminPageTwo.Surface;
    

    //Set DnsResolverIp
    DnsResolverIpLabel := TNewStaticText.Create(GatewayAdminPageTwo);
    DnsResolverIpLabel.Name := 'DnsResolverIpLabel';
    DnsResolverIpLabel.Top :=  BundleLabel.Top + MdnMonitorLabel.Height + ScaleY(11);
    DnsResolverIpLabel.Caption := 'Dns Resolver IP: ';
    DnsResolverIpLabel.Parent := GatewayAdminPageTwo.Surface;
                              
    DnsResolverIpText := TNewEdit.Create(GatewayAdminPageTwo);
    DnsResolverIpText.Name := 'DnsResolverIpText';
    DnsResolverIpText.Top := DnsResolverIpLabel.Top;
    DnsResolverIpText.Left := DomainManagerText.Left;
    DnsResolverIpText.Width := DomainManagerText.Width;
    DnsResolverIpText.Parent := GatewayAdminPageTwo.Surface;
    




    GatewayAdminPageTwo.OnActivate := @GatewayAdminPageTwoOnActivate;
    GatewayAdminPageTwo.OnNextButtonClick := @SetGatewayConfigPageTwoOnClick;
    GatewayAdminPageTwo.OnShouldSkipPage := @GatewayAdminPage_ShouldSkip;

    Result := GatewayAdminPageTwo;
end;




function CreateGatewayWizardPageThree(pageBefore: TWizardPage): TWizardPage;
var
  GatewaySmtpAdminPage: TWizardPage;
  HelpButton: TNewButton;
  PickupLabel, RawMessageLabel, BadMessageLabel, IncomingMessageLabel, OutgoingMessageLabel : TNewStaticText;
  PickupText, RawMessageText, BadMessageText, IncomingMessageText, OutgoingMessageText : TNewMemo;
begin
    GatewaySmtpAdminPage := CreateCustomPage(pageBefore.ID, 'Configure Gateway part III (SMTP)', '');

    HelpButton := TNewButton.Create(GatewaySmtpAdminPage);      
    HelpButton.Left := GatewaySmtpAdminPage.Surface.Width - ScaleX(20);
    HelpButton.Width := ScaleX(20);
    HelpButton.Height := ScaleY(20);   
    HelpButton.Caption := '?';
    HelpButton.OnClick := @GatewayAdminHelpButtonOnClick;
    HelpButton.Parent := GatewaySmtpAdminPage.Surface;  
         
    //Set Pickup Folder
    PickupLabel := TNewStaticText.Create(GatewaySmtpAdminPage);
    PickupLabel.Name := 'DomainLabel';
    PickupLabel.Top :=  HelpButton.Top + HelpButton.Height + ScaleY(14);
    PickupLabel.Caption := 'SMTP Message Pickup Folder: ';
    PickupLabel.Parent := GatewaySmtpAdminPage.Surface;
    PickupLabel.Width := PickupLabel.Width + ScaleX(4);
                              
    PickupText := TNewMemo.Create(GatewaySmtpAdminPage);
    PickupText.Name := 'PickupText';
    PickupText.Top := HelpButton.Top + HelpButton.Height + ScaleY(14);
    PickupText.Left := PickupLabel.Width + ScaleX(4);
    PickupText.Width := GatewaySmtpAdminPage.SurfaceWidth - PickupLabel.Width - ScaleX(4);
    PickupText.Height := PickupText.Height div 4;
    PickupText.WordWrap := false;
    PickupText.WantReturns := false;
    PickupText.Parent := GatewaySmtpAdminPage.Surface;

    //Set Raw Message folder
    RawMessageLabel := TNewStaticText.Create(GatewaySmtpAdminPage);
    RawMessageLabel.Name := 'RawMessageLabel';
    RawMessageLabel.Top :=  PickupLabel.Top + PickupLabel.Height + ScaleY(14);
    RawMessageLabel.Caption := 'Raw Message Folder: ';
    RawMessageLabel.Parent := GatewaySmtpAdminPage.Surface;
                              
    RawMessageText := TNewMemo.Create(GatewaySmtpAdminPage);
    RawMessageText.Name := 'RawMessageText';
    RawMessageText.Top := RawMessageLabel.Top;
    RawMessageText.Left := PickupText.Left;
    RawMessageText.Width := PickupText.Width;
    RawMessageText.Height := RawMessageText.Height div 4;
    RawMessageText.WordWrap := false;
    RawMessageText.WantReturns := false;
    RawMessageText.Parent := GatewaySmtpAdminPage.Surface;
    
    //Set Bad Message Folder
    BadMessageLabel := TNewStaticText.Create(GatewaySmtpAdminPage);
    BadMessageLabel.Name := 'BadMessageLabel';
    BadMessageLabel.Top :=  RawMessageLabel.Top + RawMessageLabel.Height + ScaleY(14);
    BadMessageLabel.Caption := 'Bad Message Folder: ';
    BadMessageLabel.Parent := GatewaySmtpAdminPage.Surface;
                              
    BadMessageText := TNewMemo.Create(GatewaySmtpAdminPage);
    BadMessageText.Name := 'BadMessageText';
    BadMessageText.Top := BadMessageLabel.Top;
    BadMessageText.Left := PickupText.Left;
    BadMessageText.Width := PickupText.Width;
    BadMessageText.Height := BadMessageText.Height div 4;
    BadMessageText.WordWrap := false;
    BadMessageText.WantReturns := false;
    BadMessageText.Parent := GatewaySmtpAdminPage.Surface;

    //Set Incoming Message Folder
    IncomingMessageLabel := TNewStaticText.Create(GatewaySmtpAdminPage);
    IncomingMessageLabel.Name := 'IncomingMessageLabel';
    IncomingMessageLabel.Top :=  BadMessageLabel.Top + BadMessageLabel.Height + ScaleY(14);
    IncomingMessageLabel.Caption := 'Incoming Message Folder: ';
    IncomingMessageLabel.Parent := GatewaySmtpAdminPage.Surface;
                              
    IncomingMessageText := TNewMemo.Create(GatewaySmtpAdminPage);
    IncomingMessageText.Name := 'IncomingMessageText';
    IncomingMessageText.Top := IncomingMessageLabel.Top;
    IncomingMessageText.Left := PickupText.Left;
    IncomingMessageText.Width := PickupText.Width;
    IncomingMessageText.Height := IncomingMessageText.Height div 4;
    IncomingMessageText.WordWrap := false;
    IncomingMessageText.WantReturns := false;
    IncomingMessageText.Parent := GatewaySmtpAdminPage.Surface;

    //Set Outgoing Message Folder
    OutgoingMessageLabel := TNewStaticText.Create(GatewaySmtpAdminPage);
    OutgoingMessageLabel.Name := 'OutgoingMessageLabel';
    OutgoingMessageLabel.Top :=  IncomingMessageLabel.Top + IncomingMessageLabel.Height + ScaleY(14);
    OutgoingMessageLabel.Caption := 'Outgoing Message Folder: ';
    OutgoingMessageLabel.Parent := GatewaySmtpAdminPage.Surface;
                              
    OutgoingMessageText := TNewMemo.Create(GatewaySmtpAdminPage);
    OutgoingMessageText.Name := 'OutgoingMessageText';
    OutgoingMessageText.Top := OutgoingMessageLabel.Top;
    OutgoingMessageText.Left := PickupText.Left;
    OutgoingMessageText.Width := PickupText.Width;
    OutgoingMessageText.Height := OutgoingMessageText.Height div 4;
    OutgoingMessageText.WordWrap := false;
    OutgoingMessageText.WantReturns := false;
    OutgoingMessageText.Parent := GatewaySmtpAdminPage.Surface;

    OutgoingMessageLabel := TNewStaticText.Create(GatewaySmtpAdminPage);
    OutgoingMessageLabel.Caption := 'Outgoing Folder: ';
        
    GatewaySmtpAdminPage.OnActivate := @GatewayAdminPageThreeOnActivate;
    GatewaySmtpAdminPage.OnNextButtonClick := @SetConfigAdminPageThreeEndpointsOnClick;
    GatewaySmtpAdminPage.OnShouldSkipPage := @GatewayAdminPage_ShouldSkip;

    Result := GatewaySmtpAdminPage;
end;

function CreateConfigConsolePageOne(pageBefore: TWizardPage): TWizardPage;
var
  ConfigConsolePage: TWizardPage;
  HelpButton, EndPointsButton: TNewButton;
  DomainManagerLabel, AddressManagerLabel, DnsRecordManagerLabel, PrivateCertsLabel, AnchorsLabel, MdnMonitorLabel, BundleLabel: TNewStaticText;
  DomainManagerText, AddressManagerText, DnsRecordManagerText, PrivateCertsText, AnchorsText, MdnMonitorText, BundleText: TNewEdit;

begin
    ConfigConsolePage := CreateCustomPage(pageBefore.ID, 'Configure Gateway Console I', '');

    HelpButton := TNewButton.Create(ConfigConsolePage);
    HelpButton.Left := ConfigConsolePage.Surface.Width - ScaleX(20);
    HelpButton.Width := ScaleX(20);
    HelpButton.Height := ScaleY(20);
    HelpButton.Caption := '?';
    HelpButton.OnClick := @ConfigConsolePageHelpButtonOnClick;
    HelpButton.Parent := ConfigConsolePage.Surface;

    //Test button
    EndPointsButton := TNewButton.Create(ConfigConsolePage);
    EndPointsButton.Caption := 'Test End Points:';
    EndPointsButton.Width :=  ConfigConsolePage.SurfaceWidth div 4;
    EndPointsButton.OnClick := @ConfigConsolePageOneOnClick;
    EndPointsButton.Parent := ConfigConsolePage.Surface;
    
    //Set Trust Bundle.  Later it is placed in the page location.  Using its width to base all the texbox left positions.
    BundleLabel := TNewStaticText.Create(ConfigConsolePage);
    BundleLabel.Name := 'BundleLabel';
    BundleLabel.Caption := 'TrustBundle Manager: ';
    BundleLabel.Width := BundleLabel.Width - ScaleX(4);
    
    //Set Domain Manager
    DomainManagerLabel := TNewStaticText.Create(ConfigConsolePage);
    DomainManagerLabel.Name := 'DomainManagerLabel';
    DomainManagerLabel.Top :=  EndPointsButton.Top + EndPointsButton.Height + ScaleY(11);
    DomainManagerLabel.Caption := 'Domain Manager: ';
    DomainManagerLabel.Parent := ConfigConsolePage.Surface;

    DomainManagerText := TNewEdit.Create(ConfigConsolePage);
    DomainManagerText.Name := 'DomainManagerText';
    DomainManagerText.Top := DomainManagerLabel.Top;
    DomainManagerText.Left := BundleLabel.Width + ScaleX(4);
    DomainManagerText.Width := ConfigConsolePage.SurfaceWidth - BundleLabel.Width - ScaleX(4);
    DomainManagerText.Parent := ConfigConsolePage.Surface;


    //Set Address Manager
    AddressManagerLabel := TNewStaticText.Create(ConfigConsolePage);
    AddressManagerLabel.Name := 'AddressManagerLabel';
    AddressManagerLabel.Top :=  DomainManagerLabel.Top + DomainManagerLabel.Height + ScaleY(11);
    AddressManagerLabel.Caption := 'Address Manager: ';
    AddressManagerLabel.Parent := ConfigConsolePage.Surface;

    AddressManagerText := TNewEdit.Create(ConfigConsolePage);
    AddressManagerText.Name := 'AddressManagerText';
    AddressManagerText.Top := AddressManagerLabel.Top;
    AddressManagerText.Left := DomainManagerText.Left;
    AddressManagerText.Width := DomainManagerText.Width;
    AddressManagerText.Parent := ConfigConsolePage.Surface;

    //Set Privates Certs 
    PrivateCertsLabel := TNewStaticText.Create(ConfigConsolePage);
    PrivateCertsLabel.Caption := 'Certificate Resolver: ';
    PrivateCertsLabel.Name := 'PrivateCertsLabel';
    PrivateCertsLabel.Top :=  AddressManagerLabel.Top + AddressManagerLabel.Height + ScaleY(11);
    PrivateCertsLabel.Parent := ConfigConsolePage.Surface;

    PrivateCertsText := TNewEdit.Create(ConfigConsolePage);
    PrivateCertsText.Name := 'PrivateCertsText';
    PrivateCertsText.Top := PrivateCertsLabel.Top;
    PrivateCertsText.Left := DomainManagerText.Left;
    PrivateCertsText.Width := DomainManagerText.Width;
    PrivateCertsText.Parent := ConfigConsolePage.Surface;

    //Set Anchors
    AnchorsLabel := TNewStaticText.Create(ConfigConsolePage);
    AnchorsLabel.Name := 'AnchorsLabel';
    AnchorsLabel.Top :=  PrivateCertsLabel.Top + PrivateCertsLabel.Height + ScaleY(11);
    AnchorsLabel.Caption := 'Anchor Resolver: ';
    AnchorsLabel.Parent := ConfigConsolePage.Surface;

    AnchorsText := TNewEdit.Create(ConfigConsolePage);
    AnchorsText.Name := 'AnchorsText';
    AnchorsText.Top := AnchorsLabel.Top;
    AnchorsText.Left := DomainManagerText.Left;
    AnchorsText.Width := DomainManagerText.Width;
    AnchorsText.Parent := ConfigConsolePage.Surface;
    
    
    //Set Dns Record Manager
    DnsRecordManagerLabel := TNewStaticText.Create(ConfigConsolePage);
    DnsRecordManagerLabel.Name := 'DnsRecordManagerLabel';
    DnsRecordManagerLabel.Top :=  AnchorsLabel.Top + AnchorsLabel.Height + ScaleY(11);
    DnsRecordManagerLabel.Caption := 'DNS Manager: ';
    DnsRecordManagerLabel.Parent := ConfigConsolePage.Surface;

    DnsRecordManagerText := TNewEdit.Create(ConfigConsolePage);
    DnsRecordManagerText.Name := 'DnsRecordManagerText';
    DnsRecordManagerText.Top := DnsRecordManagerLabel.Top;
    DnsRecordManagerText.Left := DomainManagerText.Left;
    DnsRecordManagerText.Width := DomainManagerText.Width;
    DnsRecordManagerText.Parent := ConfigConsolePage.Surface;

                     
    


    //Set MdnMonitor Record Manager
    MdnMonitorLabel := TNewStaticText.Create(ConfigConsolePage);
    MdnMonitorLabel.Name := 'MdnMonitorLabel';
    MdnMonitorLabel.Top :=  DnsRecordManagerLabel.Top + DnsRecordManagerLabel.Height + ScaleY(11);
    MdnMonitorLabel.Caption := 'MDN Monitor: ';
    MdnMonitorLabel.Parent := ConfigConsolePage.Surface;

    MdnMonitorText := TNewEdit.Create(ConfigConsolePage);
    MdnMonitorText.Name := 'MdnMonitorText';
    MdnMonitorText.Top := MdnMonitorLabel.Top;
    MdnMonitorText.Left := DomainManagerText.Left;
    MdnMonitorText.Width := DomainManagerText.Width;
    MdnMonitorText.Parent := ConfigConsolePage.Surface;


    //Set Trust Bundle Manager  (Created above)            
    BundleLabel.Top :=  MdnMonitorLabel.Top + MdnMonitorLabel.Height + ScaleY(11);      
    BundleLabel.Parent := ConfigConsolePage.Surface;

    BundleText := TNewEdit.Create(ConfigConsolePage);
    BundleText.Name := 'BundleText';
    BundleText.Top := BundleLabel.Top;
    BundleText.Left := DomainManagerText.Left;
    BundleText.Width := DomainManagerText.Width;
    BundleText.Parent := ConfigConsolePage.Surface;


    ConfigConsolePage.OnActivate := @ConfigConsolePageOneOnActivate;
    ConfigConsolePage.OnNextButtonClick := @SetConfigConsolePageOneEndpointsOnClick;
    ConfigConsolePage.OnShouldSkipPage := @ConfigConsolePage_ShouldSkip;

    Result := ConfigConsolePage;
end;





function CreateConfigConsolePageTwo(pageBefore: TWizardPage): TWizardPage;
var
  ConfigConsolePage: TWizardPage;
  HelpButton, EndPointsButton: TNewButton;
  PropertyLabel, BlobLabel: TNewStaticText;
  PropertyText, BlobText: TNewEdit;

begin
    ConfigConsolePage := CreateCustomPage(pageBefore.ID, 'Configure Gateway Console II', '');

    HelpButton := TNewButton.Create(ConfigConsolePage);
    HelpButton.Left := ConfigConsolePage.Surface.Width - ScaleX(20);
    HelpButton.Width := ScaleX(20);
    HelpButton.Height := ScaleY(20);
    HelpButton.Caption := '?';
    HelpButton.OnClick := @ConfigConsolePageHelpButtonOnClick;
    HelpButton.Parent := ConfigConsolePage.Surface;

    //Test button
    EndPointsButton := TNewButton.Create(ConfigConsolePage);
    EndPointsButton.Caption := 'Test End Points:';
    EndPointsButton.Width :=  ConfigConsolePage.SurfaceWidth div 4;
    EndPointsButton.OnClick := @ConfigConsolePageTwoOnClick;
    EndPointsButton.Parent := ConfigConsolePage.Surface;
    
     
    
    //Set Property Service endpoint
    PropertyLabel := TNewStaticText.Create(ConfigConsolePage);
    PropertyLabel.Name := 'PropertyLabel';
    PropertyLabel.Width := PropertyLabel.Width - ScaleX(4);
    PropertyLabel.Top :=  EndPointsButton.Top + EndPointsButton.Height + ScaleY(11);
    PropertyLabel.Caption := 'Property (Console): ';
    PropertyLabel.Parent := ConfigConsolePage.Surface;

    PropertyText := TNewEdit.Create(ConfigConsolePage);
    PropertyText.Name := 'PropertyText';
    PropertyText.Top := PropertyLabel.Top;
    PropertyText.Left := PropertyLabel.Width + ScaleX(4);
    PropertyText.Width := ConfigConsolePage.SurfaceWidth - PropertyLabel.Width - ScaleX(4);
    PropertyText.Parent := ConfigConsolePage.Surface;

    //Set Blob Service endpoint
    BlobLabel := TNewStaticText.Create(ConfigConsolePage);
    BlobLabel.Name := 'BlobLabel';
    BlobLabel.Top :=  PropertyLabel.Top + PropertyLabel.Height + ScaleY(11);
    BlobLabel.Caption := 'Blob (Console): ';
    BlobLabel.Parent := ConfigConsolePage.Surface;

    BlobText := TNewEdit.Create(ConfigConsolePage);
    BlobText.Name := 'BlobText';
    BlobText.Top := BlobLabel.Top;
    BlobText.Left := PropertyText.Left;
    BlobText.Width := PropertyText.Width;
    BlobText.Parent := ConfigConsolePage.Surface;
    

    ConfigConsolePage.OnActivate := @ConfigConsolePageTwoOnActivate;
    ConfigConsolePage.OnNextButtonClick := @SetConfigConsolePageTwoEndpointsOnClick;
    ConfigConsolePage.OnShouldSkipPage := @ConfigConsolePage_ShouldSkip;

    Result := ConfigConsolePage;
end;


function CreateUIConfigWizardPage(pageBefore: TWizardPage): TWizardPage;
var
  ConfigAdminPage: TWizardPage;       
  HelpButton, EndPointsButton: TNewButton;  
  CertificatesLabel, AnchorsLabel, AddressesLabel, DomainsLabel, DnsRecordsLabel, AuthenticationLabel : TNewStaticText;
  CertificatesUrlText, AnchorsUrlText, AddressesUrlText, DomainsUrlText, DnsRecordsUrlText, AuthenticationUrlText : TNewEdit;
  
begin

  ConfigAdminPage := CreateCustomPage(pageBefore.ID, 'Configure Admin UI', '');
    
  HelpButton := TNewButton.Create(ConfigAdminPage);      
  HelpButton.Left := ConfigAdminPage.Surface.Width - ScaleX(20);
  HelpButton.Width := ScaleX(20);
  HelpButton.Height := ScaleY(20);   
  HelpButton.Caption := '?';
  HelpButton.OnClick := @ConfigAdminHelpButtonOnClick;
  HelpButton.Parent := ConfigAdminPage.Surface;  
    
  EndPointsButton := TNewButton.Create(ConfigAdminPage);
  EndPointsButton.Width :=  (ConfigAdminPage.Surface.Width div 4)
  EndPointsButton.Caption := 'Test End Points:';
  EndPointsButton.OnClick := @ConfigAdminHostNameOnClick;
  EndPointsButton.Parent := ConfigAdminPage.Surface;


  //Set AuthenticationLabel.  Later it is placed in its page location.  Using its width to base all the texbox left positions.
  AuthenticationLabel := TNewStaticText.Create(ConfigAdminPage);
  AuthenticationLabel.Name := 'AuthenticationLabel';
  AuthenticationLabel.Caption := 'Authentication: ';
  AuthenticationLabel.Width := AuthenticationLabel.Width + ScaleX(12);
  
  CertificatesLabel := TNewStaticText.Create(ConfigAdminPage);
  CertificatesLabel.Name := 'CertificatesLabel'
  CertificatesLabel.Caption := 'Certificates: ';
  CertificatesLabel.Top := EndPointsButton.Top + EndPointsButton.Height + ScaleY(14);
  CertificatesLabel.Parent := ConfigAdminPage.Surface;

  CertificatesUrlText := TNewEdit.Create(ConfigAdminPage);
  CertificatesUrlText.Name := 'CertificatesUrlText';
  CertificatesUrlText.Top := CertificatesLabel.Top;
  CertificatesUrlText.Left := CertificatesLabel.Left + CertificatesLabel.Width + ScaleX(12);
  CertificatesUrlText.Width := ConfigAdminPage.SurfaceWidth - AuthenticationLabel.Width - ScaleX(4);
  CertificatesUrlText.Parent := ConfigAdminPage.Surface;
   

  AnchorsLabel := TNewStaticText.Create(ConfigAdminPage);
  AnchorsLabel.Name := 'AnchorsLabel';
  AnchorsLabel.Caption := 'Anchors: ';
  AnchorsLabel.Top := CertificatesLabel.Top + CertificatesLabel.Height + ScaleY(14);
  AnchorsLabel.Parent := ConfigAdminPage.Surface;

  AnchorsUrlText := TNewEdit.Create(ConfigAdminPage);
  AnchorsUrlText.Name := 'AnchorsUrlText';
  AnchorsUrlText.Top := AnchorsLabel.Top;
  AnchorsUrlText.Left := CertificatesUrlText.Left;
  AnchorsUrlText.Width := CertificatesUrlText.Width;
  AnchorsUrlText.Parent := ConfigAdminPage.Surface;


  AddressesLabel := TNewStaticText.Create(ConfigAdminPage);
  AddressesLabel.Name := 'AddressesLabel';
  AddressesLabel.Caption := 'Addresses: ';
  AddressesLabel.Top := AnchorsLabel.Top + AnchorsLabel.Height + ScaleY(14);
  AddressesLabel.Parent := ConfigAdminPage.Surface;

  AddressesUrlText := TNewEdit.Create(ConfigAdminPage);
  AddressesUrlText.Name := 'AddressesUrlText';
  AddressesUrlText.Top := AddressesLabel.Top;
  AddressesUrlText.Left := CertificatesUrlText.Left;
  AddressesUrlText.Width := CertificatesUrlText.Width;
  AddressesUrlText.Parent := ConfigAdminPage.Surface;
  

  DomainsLabel := TNewStaticText.Create(ConfigAdminPage);
  DomainsLabel.Name := 'DomainsLabel'
  DomainsLabel.Caption := 'Domains: ';
  DomainsLabel.Top := AddressesLabel.Top + AddressesLabel.Height + ScaleY(14);
  DomainsLabel.Parent := ConfigAdminPage.Surface;

  DomainsUrlText := TNewEdit.Create(ConfigAdminPage);
  DomainsUrlText.Name := 'DomainsUrlText';
  DomainsUrlText.Top := DomainsLabel.Top;
  DomainsUrlText.Left := CertificatesUrlText.Left;
  DomainsUrlText.Width := CertificatesUrlText.Width;
  DomainsUrlText.Parent := ConfigAdminPage.Surface;


  DnsRecordsLabel := TNewStaticText.Create(ConfigAdminPage);
  DnsRecordsLabel.Name := 'DnsRecordsLabel';
  DnsRecordsLabel.Caption := 'DnsRecords: ';
  DnsRecordsLabel.Top := DomainsLabel.Top + DomainsLabel.Height + ScaleY(14);
  DnsRecordsLabel.Parent := ConfigAdminPage.Surface;

  DnsRecordsUrlText := TNewEdit.Create(ConfigAdminPage);
  DnsRecordsUrlText.Name := 'DnsRecordsUrlText';
  DnsRecordsUrlText.Top := DnsRecordsLabel.Top;
  DnsRecordsUrlText.Left := CertificatesUrlText.Left;
  DnsRecordsUrlText.Width := CertificatesUrlText.Width;
  DnsRecordsUrlText.Parent := ConfigAdminPage.Surface;



  AuthenticationLabel.Top := DnsRecordsLabel.Top + DnsRecordsLabel.Height + ScaleY(14);
  AuthenticationLabel.Parent := ConfigAdminPage.Surface;

  AuthenticationUrlText := TNewEdit.Create(ConfigAdminPage);
  AuthenticationUrlText.Name := 'AuthenticationUrlText';
  AuthenticationUrlText.Top := AuthenticationLabel.Top;
  AuthenticationUrlText.Left := CertificatesUrlText.Left;
  AuthenticationUrlText.Width := CertificatesUrlText.Width;
  AuthenticationUrlText.Parent := ConfigAdminPage.Surface;


  ConfigAdminPage.OnActivate := @ConfigAdminPageOnActivate;
  ConfigAdminPage.OnNextButtonClick := @SetConfigAdminEndpointsOnClick;
  ConfigAdminPage.OnShouldSkipPage := @ConfigAdminPage_ShouldSkip;

  Result := ConfigAdminPage;
end;


procedure CreateAboutButtonAndURLLabel(ParentForm: TSetupForm; CancelButton: TNewButton);
var    
  URLLabel: TNewStaticText;

begin
  
  URLLabel := TNewStaticText.Create(ParentForm);
  URLLabel.Caption := 'See instructions';
  URLLabel.Cursor := crHand;
  URLLabel.OnClick := @URLLabelOnClick;
  URLLabel.Parent := ParentForm;
  { Alter Font *after* setting Parent so the correct defaults are inherited first }
  URLLabel.Font.Style := URLLabel.Font.Style + [fsUnderline];
  URLLabel.Font.Color := clBlue;
  URLLabel.Top := CancelButton.Top + CancelButton.Height - CancelButton.Height - 2;
  URLLabel.Left := ScaleX(20);


end;


//Create Virtual directories
procedure CurStepChanged(CurStep: TSetupStep);
          
begin
  
  //Post install step
  if (CurStep = ssPostInstall) then begin
    //Dns web service somponent selected and Not installing development type
    if (pos( 'dnswebservice', WizardSelectedComponents( false)) > 0) and (pos( 'development', WizardSetupType( false)) = 0) then  
      begin
        CreateIIS4VirtualDir('DnsService', ExpandConstant('{app}') + '\DnsService', 'Direct DNS Responder Service');
      end; 
    //Config web service component selected and Not installing development type
    if (pos( 'configwebservice', WizardSelectedComponents( false)) > 0)  and (pos( 'development', WizardSetupType( false)) = 0) then  
      begin
        CreateIIS4VirtualDir('ConfigService', ExpandConstant('{app}') + '\ConfigService', 'Direct Config Service');
      end;
    //Config UI web application component selected and Not installing development type
    if (pos( 'configui', WizardSelectedComponents( false)) > 0)  and (pos( 'development', WizardSetupType( false)) = 0) then  
      begin
        CreateIIS4VirtualDir('ConfigUI', ExpandConstant('{app}') + '\ConfigUI', 'Direct Config Admin');
      end;
   
  end;
  //Log file maintenance
  if CurStep = ssDone then
    OkToCopyLog := True;


end;



//Remove Virtual directories.
procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
var
  DnsWebService_Vdir, ConfigWebService_Vdir, ConfigUiWebApp_Vdir: String;
begin
  
  //Post install step
  if (CurUninstallStep = usUninstall) then begin

    DnsWebService_Vdir := GetIniString('InstallSettings', 'DnsWebService_Vdir', 'unknown', ExpandConstant('{app}') + '\direct.ini');
    ConfigWebService_Vdir := GetIniString('InstallSettings', 'ConfigWebService_Vdir', 'unknown', ExpandConstant('{app}') + '\direct.ini');
    ConfigUiWebApp_Vdir := GetIniString('InstallSettings', 'ConfigUiWebApp_Vdir', 'unknown', ExpandConstant('{app}') + '\direct.ini')


    //Dns web service somponent selected and Not installing development type
    if not (CompareStr('unknown', DnsWebService_Vdir) = 0)  then  
      begin
        DeleteIISVirtualDir(DnsWebService_Vdir);
      end; 
    //Config web service component selected and Not installing development type
    if not (CompareStr('unknown', ConfigWebService_Vdir) = 0)  then  
      begin
        DeleteIISVirtualDir(ConfigWebService_Vdir);
      end;
    //Config UI web application component selected and Not installing development type
    if not (CompareStr('unknown', ConfigUiWebApp_Vdir) = 0)  then  
      begin
        DeleteIISVirtualDir(ConfigUiWebApp_Vdir);
      end;
  end;
end;




procedure InitializeWizard;
var
  Page : TWizardPage;
begin

  Page := PageFromID(wpInfoAfter);
  
  Page := CreateDatabaseConnWizardPage(Page);
  Page.Name := 'ConfigService';
  Page.Description := '\ConfigService\Web.Config';
  
  Page := CreateDatabaseConnWizardPage(Page);
  Page.Name := 'DnsService';
  Page.Description := '\DnsService\Web.Config';
  
  Page := CreateGatewayWizardPageOne(Page);      //Gateway part I
  Page := CreateGatewayWizardPageTwo(Page);      //Gateway part II
  Page := CreateGatewayWizardPageThree(Page);    //Gateway part III
  Page := CreateConfigConsolePageOne(Page);      //ConfigConsoleSettings.xml.  Almost like part III of Gateway.  It is included as part of the gateway component
  Page := CreateConfigConsolePageTwo(Page);                         
                                              //If you wanted to install the configConsole onto a workstation then pass skipsmtpcheck as a command line parameter to the installer.
                                              //It will ignore the port 25 check and still install.
  

  Page := CreateDnsResponderWizardPage(Page);

  Page := CreateDatabaseConnWizardPage(Page);
  Page.Name := 'MdnMonitorService';
  Page.Description := 'DirectMonitorWinSrv.exe.config';
  
  Page := CreateUIConfigWizardPage(Page);

  CreateAboutButtonAndURLLabel(WizardForm, WizardForm.CancelButton);
  
end;



