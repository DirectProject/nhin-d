h1. Deployment Considerations

The default deployment makes some bold assumptions about the deployment model.  It assumes a single instance of the monitoring service running a local derby database.  For a scalable and highly available service, configuration and custom code is most likely necessary.  The following sections outline some considerations for moving to scalable and highly available deployment model.

h2. Aggregator State

By nature, aggregators are stateful.  The default Camel aggregator uses an in memory model to hold state which means it is not readily scalable across multiple instances of the service.  It may be necessary to write a custom aggregator state module that persists and obtains state from a centralized database.  Camel provides interfaces to enable this type state persistence, but still requires custom code to be written the properly support distributed state.

h2. Duplication State Store

The default deployment uses the Derby embedded database.  This database is file based and only allows a single process to access the database at any time.  A true RDBMS such as MySQL, Oracle, or postgress is necessary for running multiple instances.  Fortunately, this may only require the properties file to be modified with the proper driver class and JDBC URL.

h2. Retry Dead Letter URL

The default deployment writes out string representation of the aggregated message is the DSN message cannot be sent to the gateway URL.  A system that requires reporting or more sophisticated reply may need to change the representation of the messages or the URL of the dead letter queue.